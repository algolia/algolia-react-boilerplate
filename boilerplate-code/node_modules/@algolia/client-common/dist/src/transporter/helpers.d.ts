import type { Headers, Host, QueryParameters, Request, RequestOptions, Response, StackFrame } from '../types';
export declare function shuffle<TData>(array: TData[]): TData[];
export declare function serializeUrl(host: Host, path: string, queryParameters: QueryParameters): string;
export declare function serializeQueryParameters(parameters: QueryParameters): string;
export declare function serializeData(request: Request, requestOptions: RequestOptions): string | undefined;
export declare function serializeHeaders(baseHeaders: Headers, requestHeaders: Headers, requestOptionsHeaders?: Headers): Headers;
export declare function deserializeSuccess<TObject>(response: Response): TObject;
export declare function deserializeFailure({ content, status }: Response, stackFrame: StackFrame[]): Error;
//# sourceMappingURL=helpers.d.ts.map
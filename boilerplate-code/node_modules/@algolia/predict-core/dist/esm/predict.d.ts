import { type Affinity, type FunnelStage, type OrderValue, type Segment, type UserProfile } from './types';
export declare type PredictApi = {
    affinities: Affinity[];
    cartAbandonment: number;
    funnelStage: FunnelStage[];
    orderValue: OrderValue | undefined;
    segments: Segment[];
    userProfile: UserProfile;
    zones: Zone[];
};
export declare type Zone = {
    id: string;
    name: string;
    active: boolean;
    happened: boolean;
};
declare type EventType = 'UPDATED' | 'ZONE_ADDED' | 'ZONE_REMOVED' | 'ZONE_UPDATED';
declare type Subscriber = (params: PredictApi & {
    eventType: EventType;
}) => void;
export declare type PredictCoreApi = {
    getAffinities: () => Affinity[];
    getFunnelStage: () => FunnelStage[];
    getOrderValue: () => OrderValue | undefined;
    getCartAbandonment: () => number;
    getSegments: () => Segment[];
    getUserProfile: () => UserProfile;
    getZones: () => Zone[];
    update: (nextParams: Partial<PredictOptions>) => void;
    addZone: (zone: Zone) => Zone;
    removeZone: (zone: Zone) => void;
    updateZone: (zone: Pick<Zone, 'id'> & Partial<Zone>) => Zone;
    subscribe: (subscriber: Subscriber) => () => void;
};
export declare type PredictOptions = {
    userProfile: UserProfile;
};
export declare function predict(params: PredictOptions): PredictCoreApi;
export {};

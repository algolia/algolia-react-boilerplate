import { type PredictApi, type PredictCoreApi } from '../predict';

import { runAction } from './actions';
import {
  type PredictMessage,
  EXTENSION_TO_PREDICT,
  PREDICT_TO_EXTENSION,
} from './types';

function sendMessage<TData = never>(message: PredictMessage<TData>) {
  window.postMessage({ source: PREDICT_TO_EXTENSION, ...message }, '*');
}

type InitPredictToolsParams = {
  version: string;
  getContext: () => PredictApi;
  subscribe: PredictCoreApi['subscribe'];
};

export function initPredictTools({
  version,
  getContext,
  subscribe,
}: InitPredictToolsParams) {
  /**
   * Notifies the Predict Tools from the Predict context.
   */
  function init() {
    sendMessage({ type: 'init', data: { version, context: getContext() } });
  }

  // We initialize the Predict Tools right away if the browser's DevTools are open.
  init();

  // And we send any state change updates to the Predict Tools.
  subscribe(({ eventType, ...context }) => {
    sendMessage({ type: 'state-change', data: { version, context } });
  });

  // Then, we listen to messages coming from the Predict Tools.
  window.addEventListener('message', (event) => {
    if (event.data.source === EXTENSION_TO_PREDICT) {
      runAction(event.data, { init });
    }
  });
}

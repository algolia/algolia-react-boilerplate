import { invariant } from '../lib/invariant';

import { createElementHighlighter } from './highlighter';
import { type PredictToolsMessage } from './types';

const highlighter = createElementHighlighter();

type ZoneActionProps = {
  zoneId: string;
};
type ZoneHighlightActionProps = ZoneActionProps & {
  params: { style: Record<string, any> };
};

export function runAction(
  message: PredictToolsMessage<unknown>,
  { init }: { init: () => void }
) {
  const { type, data } = message;

  const actions: Record<string, (...args: any[]) => void> = {
    'request-init': () => {
      // Answer back to the Predict Tools that just opened.
      init();
    },
    'request-highlight-zone': ({
      zoneId,
      params,
    }: ZoneHighlightActionProps) => {
      const predictZoneElement = document.querySelector<HTMLElement>(
        `[data-predictzoneid="${zoneId}"]`
      );

      if (predictZoneElement) {
        highlighter.select(predictZoneElement, { id: zoneId, ...params });
      }
    },
    'request-unhighlight-zone': ({ zoneId }: ZoneActionProps) => {
      highlighter.unselect(zoneId);
    },
    'request-scroll-to-zone': ({ zoneId }: ZoneActionProps) => {
      const predictZoneElement = document.querySelector<HTMLElement>(
        `[data-predictzoneid="${zoneId}"]`
      );

      if (predictZoneElement) {
        const scrollIntoView: typeof predictZoneElement.scrollIntoView =
          (predictZoneElement as any).scrollIntoViewIfNeeded.bind(
            predictZoneElement
          ) || predictZoneElement.scrollIntoView.bind(predictZoneElement);

        scrollIntoView();
      }
    },
    disconnect: () => {
      highlighter.unselectAll();
    },
  };

  const action = actions[type];

  invariant(
    Boolean(action),
    `The Predict Tools event "${type}" is not implemented.`
  );

  action(data);
}

/** @jsx createElement */
import { ComponentChildren, ComponentProps, ElementType, Renderer } from '@algolia/ui-components-shared';
interface IntrinsicElement extends JSX.IntrinsicAttributes {
    children?: ComponentChildren;
    className?: string;
}
declare global {
    namespace JSX {
        interface IntrinsicElements {
            span: IntrinsicElement;
            mark: IntrinsicElement;
        }
    }
}
declare type HighlightedPart = {
    isHighlighted: boolean;
    value: string;
};
export declare type HighlightClassNames = {
    /**
     * Class names to apply to the root element
     */
    root: string;
    /**
     * Class names to apply to the highlighted parts
     */
    highlighted: string;
    /**
     * Class names to apply to the non-highlighted parts
     */
    nonHighlighted: string;
    /**
     * Class names to apply to the separator between highlighted parts
     */
    separator: string;
};
export declare type HighlightProps = ComponentProps<'span'> & {
    classNames?: Partial<HighlightClassNames>;
    highlightedTagName?: ElementType;
    nonHighlightedTagName?: ElementType;
    separator?: ComponentChildren;
    parts: HighlightedPart[][];
};
export declare function createHighlightComponent({ createElement, Fragment, }: Renderer): ({ parts, highlightedTagName, nonHighlightedTagName, separator, className, classNames, ...props }: HighlightProps) => JSX.Element;
export {};

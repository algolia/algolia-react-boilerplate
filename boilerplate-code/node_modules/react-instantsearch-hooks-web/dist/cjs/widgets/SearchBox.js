"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SearchBox = SearchBox;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _reactInstantsearchHooks = require("react-instantsearch-hooks");

var _SearchBox = require("../ui/SearchBox");

var _excluded = ["queryHook", "searchAsYouType", "translations"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function SearchBox(_ref) {
  var queryHook = _ref.queryHook,
      _ref$searchAsYouType = _ref.searchAsYouType,
      searchAsYouType = _ref$searchAsYouType === void 0 ? true : _ref$searchAsYouType,
      translations = _ref.translations,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  var _useSearchBox = (0, _reactInstantsearchHooks.useSearchBox)({
    queryHook: queryHook
  }, {
    $$widgetType: 'ais.searchBox'
  }),
      query = _useSearchBox.query,
      refine = _useSearchBox.refine,
      isSearchStalled = _useSearchBox.isSearchStalled;

  var _useState = (0, _react.useState)(query),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      inputValue = _useState2[0],
      setInputValue = _useState2[1];

  var inputRef = (0, _react.useRef)(null);

  function setQuery(newQuery) {
    setInputValue(newQuery);

    if (searchAsYouType) {
      refine(newQuery);
    }
  }

  function onReset() {
    setQuery('');

    if (!searchAsYouType) {
      refine('');
    }
  }

  function onChange(event) {
    setQuery(event.currentTarget.value);
  }

  function onSubmit(event) {
    if (!searchAsYouType) {
      refine(inputValue);
    }

    if (props.onSubmit) {
      props.onSubmit(event);
    }
  } // Track when the InstantSearch query changes to synchronize it with
  // the React state.
  // We bypass the state update if the input is focused to avoid concurrent
  // updates when typing.


  if (query !== inputValue && document.activeElement !== inputRef.current) {
    setInputValue(query);
  }

  var uiProps = {
    inputRef: inputRef,
    isSearchStalled: isSearchStalled,
    onChange: onChange,
    onReset: onReset,
    onSubmit: onSubmit,
    value: inputValue,
    translations: _objectSpread({
      submitButtonTitle: 'Submit the search query',
      resetButtonTitle: 'Clear the search query'
    }, translations)
  };
  return /*#__PURE__*/_react.default.createElement(_SearchBox.SearchBox, (0, _extends2.default)({}, props, uiProps));
}
import {
  require_shim
} from "./chunk-KFBQJO3J.js";
import {
  _objectWithoutProperties
} from "./chunk-JIN2KHQF.js";
import {
  dequal
} from "./chunk-4ECGFMV2.js";
import {
  _slicedToArray
} from "./chunk-4OH2SGPV.js";
import "./chunk-ABC7BXC2.js";
import {
  _extends
} from "./chunk-6SGCV3RH.js";
import {
  _defineProperty
} from "./chunk-HKWV5KNA.js";
import {
  require_react
} from "./chunk-X6MODOAL.js";
import {
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/@algolia/predict-core/dist/esm/createZone.js
var zoneCounterRef = {
  current: 0
};
function createZone(_ref) {
  var id = _ref.id, name = _ref.name, _ref$active = _ref.active, active = _ref$active === void 0 ? true : _ref$active, _ref$happened = _ref.happened, happened = _ref$happened === void 0 ? false : _ref$happened;
  var zone = {
    id: id || "".concat(name, "-").concat(++zoneCounterRef.current),
    name,
    active,
    happened
  };
  return zone;
}

// node_modules/@algolia/predict-core/dist/esm/lib/invariant.js
function invariant(condition, message) {
  if (condition) {
    return;
  }
  if (false) {
    throw new Error("Invariant failed");
  }
  if (true) {
    throw new Error("[Predict] ".concat(typeof message === "function" ? message() : message));
  }
}

// node_modules/@algolia/predict-core/dist/esm/lib/warn.js
var warnCache = {
  current: {}
};
function warn(condition, message) {
  if (false) {
    return;
  }
  if (condition) {
    return;
  }
  var sanitizedMessage = message.trim();
  var hasAlreadyPrinted = warnCache.current[sanitizedMessage];
  if (!hasAlreadyPrinted) {
    warnCache.current[sanitizedMessage] = true;
    var warning = "[Predict] ".concat(sanitizedMessage);
    console.warn(warning);
    try {
      throw new Error(warning);
    } catch (error) {
    }
  }
}

// node_modules/@algolia/predict-core/dist/esm/lib/computeCartAbandonment.js
function computeCartAbandonment(funnelStage) {
  var addToCartFunnelStage = funnelStage.find(function(x) {
    return x.name === "add_to_cart";
  });
  var transactionFunnelStage = funnelStage.find(function(x) {
    return x.name === "transaction";
  });
  if (!addToCartFunnelStage || !transactionFunnelStage) {
    return 0;
  }
  var probability = addToCartFunnelStage.probability > transactionFunnelStage.probability ? 1 : 0;
  return probability;
}

// node_modules/@algolia/predict-core/dist/esm/lib/unwrapPrediction.js
function isModelError(prediction) {
  return Boolean(prediction.error);
}
function unwrapPrediction(predictions, model, fallback) {
  var prediction = predictions && predictions[model];
  if (!prediction) {
    return fallback;
  }
  if (isModelError(prediction)) {
    true ? warn(false, prediction.error) : void 0;
    return fallback;
  }
  return prediction.value;
}

// node_modules/@algolia/predict-core/dist/esm/tools/highlighter.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function createElementHighlighter() {
  var highlights = {};
  function unselect(id) {
    var overlay = highlights[id];
    if (overlay) {
      document.body.removeChild(overlay);
      delete highlights[id];
    }
  }
  return {
    select: function select(referenceElement, props) {
      if (highlights[props.id]) {
        return;
      }
      var _referenceElement$get = referenceElement.getBoundingClientRect(), height = _referenceElement$get.height, width = _referenceElement$get.width, top = _referenceElement$get.top, left = _referenceElement$get.left;
      var overlay = document.createElement("div");
      overlay.setAttribute("data-predicthighlightid", props.id);
      var style = _objectSpread(_objectSpread({}, props.style), {}, {
        top: "".concat(top, "px"),
        left: "".concat(left, "px"),
        height: "".concat(height, "px"),
        width: "".concat(width, "px")
      });
      Object.keys(style).forEach(function(attribute) {
        overlay.style[attribute] = style[attribute];
      });
      highlights[props.id] = overlay;
      document.body.appendChild(overlay);
    },
    unselect,
    unselectAll: function unselectAll() {
      Object.keys(highlights).forEach(function(id) {
        return unselect(id);
      });
    }
  };
}

// node_modules/@algolia/predict-core/dist/esm/tools/actions.js
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var highlighter = createElementHighlighter();
function runAction(message, _ref) {
  var init = _ref.init;
  var type = message.type, data = message.data;
  var actions = {
    "request-init": function requestInit() {
      init();
    },
    "request-highlight-zone": function requestHighlightZone(_ref2) {
      var zoneId = _ref2.zoneId, params = _ref2.params;
      var predictZoneElement = document.querySelector('[data-predictzoneid="'.concat(zoneId, '"]'));
      if (predictZoneElement) {
        highlighter.select(predictZoneElement, _objectSpread2({
          id: zoneId
        }, params));
      }
    },
    "request-unhighlight-zone": function requestUnhighlightZone(_ref3) {
      var zoneId = _ref3.zoneId;
      highlighter.unselect(zoneId);
    },
    "request-scroll-to-zone": function requestScrollToZone(_ref4) {
      var zoneId = _ref4.zoneId;
      var predictZoneElement = document.querySelector('[data-predictzoneid="'.concat(zoneId, '"]'));
      if (predictZoneElement) {
        var scrollIntoView = predictZoneElement.scrollIntoViewIfNeeded.bind(predictZoneElement) || predictZoneElement.scrollIntoView.bind(predictZoneElement);
        scrollIntoView();
      }
    },
    disconnect: function disconnect() {
      highlighter.unselectAll();
    }
  };
  var action = actions[type];
  invariant(Boolean(action), 'The Predict Tools event "'.concat(type, '" is not implemented.'));
  action(data);
}

// node_modules/@algolia/predict-core/dist/esm/tools/types.js
var PREDICT_TO_EXTENSION = "predict-to-extension";
var EXTENSION_TO_PREDICT = "extension-to-predict";

// node_modules/@algolia/predict-core/dist/esm/tools/init.js
var _excluded = ["eventType"];
function ownKeys3(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys3(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys3(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function sendMessage(message) {
  window.postMessage(_objectSpread3({
    source: PREDICT_TO_EXTENSION
  }, message), "*");
}
function initPredictTools(_ref) {
  var version3 = _ref.version, getContext = _ref.getContext, subscribe = _ref.subscribe;
  function init() {
    sendMessage({
      type: "init",
      data: {
        version: version3,
        context: getContext()
      }
    });
  }
  init();
  subscribe(function(_ref2) {
    var eventType = _ref2.eventType, context = _objectWithoutProperties(_ref2, _excluded);
    sendMessage({
      type: "state-change",
      data: {
        version: version3,
        context
      }
    });
  });
  window.addEventListener("message", function(event) {
    if (event.data.source === EXTENSION_TO_PREDICT) {
      runAction(event.data, {
        init
      });
    }
  });
}

// node_modules/@algolia/predict-core/dist/esm/version.js
var version = "1.4.0";

// node_modules/@algolia/predict-core/dist/esm/predict.js
function predict(params) {
  var subscribers = [];
  var userProfile = params.userProfile;
  var zones = [];
  var update = function update2(nextParams) {
    if (nextParams.userProfile) {
      userProfile = nextParams.userProfile;
    }
    notify("UPDATED");
  };
  var getUserProfile = function getUserProfile2() {
    return userProfile;
  };
  var getSegments = function getSegments2() {
    return Object.entries(userProfile.segments || {}).reduce(function(acc, segment) {
      var type = segment[0];
      var names = segment[1];
      var segmentsInType = names.map(function(name) {
        return {
          name,
          type
        };
      });
      segmentsInType.forEach(function(segmentInType) {
        acc.push(segmentInType);
      });
      return acc;
    }, []);
  };
  var getAffinities = function getAffinities2() {
    return unwrapPrediction(userProfile.predictions, "affinities", []);
  };
  var getFunnelStage = function getFunnelStage2() {
    return unwrapPrediction(userProfile.predictions, "funnel_stage", []);
  };
  var getOrderValue = function getOrderValue2() {
    return unwrapPrediction(userProfile.predictions, "order_value", void 0);
  };
  var getCartAbandonment = function getCartAbandonment2() {
    return computeCartAbandonment(getFunnelStage());
  };
  var getZones = function getZones2() {
    return zones;
  };
  var addZone = function addZone2(newZone) {
    zones.push(newZone);
    notify("ZONE_ADDED");
    return newZone;
  };
  var removeZone = function removeZone2(zone) {
    var zoneIndex = zones.findIndex(function(x) {
      return x.id === zone.id;
    });
    invariant(zoneIndex !== -1, 'Cannot remove zone with ID "'.concat(zone.id, `" because it doesn't exist.`));
    zones.splice(zoneIndex, 1);
    notify("ZONE_REMOVED");
  };
  var updateZone = function updateZone2(zone) {
    var _zone$name, _zone$active, _zone$happened;
    var zoneIndex = zones.findIndex(function(x) {
      return x.id === zone.id;
    });
    invariant(zoneIndex !== -1, 'Cannot update zone with ID "'.concat(zone.id, `" because it doesn't exist.`));
    var prevZone = zones[zoneIndex];
    var updatedZone = {
      id: zone.id,
      name: (_zone$name = zone.name) !== null && _zone$name !== void 0 ? _zone$name : prevZone.name,
      active: (_zone$active = zone.active) !== null && _zone$active !== void 0 ? _zone$active : prevZone.active,
      happened: (_zone$happened = zone.happened) !== null && _zone$happened !== void 0 ? _zone$happened : prevZone.happened
    };
    zones[zoneIndex] = updatedZone;
    notify("ZONE_UPDATED");
    return updatedZone;
  };
  var subscribe = function subscribe2(subscriber) {
    subscribers.push(subscriber);
    return function() {
      subscribers = subscribers.filter(function(x) {
        return x !== subscriber;
      });
    };
  };
  function notify(eventType) {
    subscribers.forEach(function(subscriber) {
      subscriber({
        eventType,
        affinities: getAffinities(),
        cartAbandonment: getCartAbandonment(),
        funnelStage: getFunnelStage(),
        orderValue: getOrderValue(),
        segments: getSegments(),
        userProfile: getUserProfile(),
        zones: getZones()
      });
    });
  }
  if (typeof window !== "undefined") {
    initPredictTools({
      version,
      subscribe,
      getContext: function getContext() {
        return {
          affinities: getAffinities(),
          cartAbandonment: getCartAbandonment(),
          funnelStage: getFunnelStage(),
          orderValue: getOrderValue(),
          segments: getSegments(),
          userProfile: getUserProfile(),
          zones: getZones()
        };
      }
    });
  }
  var api = {
    getAffinities,
    getFunnelStage,
    getOrderValue,
    getCartAbandonment,
    getSegments,
    getUserProfile,
    getZones,
    update,
    addZone,
    removeZone,
    updateZone,
    subscribe
  };
  return api;
}

// node_modules/@algolia/predict-react/dist/esm/Predict.js
var import_react2 = __toESM(require_react());
var import_shim = __toESM(require_shim());

// node_modules/@algolia/predict-react/dist/esm/lib/PredictContext.js
var import_react = __toESM(require_react());
var PredictContext = (0, import_react.createContext)(null);
if (true) {
  PredictContext.displayName = "Predict";
}

// node_modules/@algolia/predict-react/dist/esm/Predict.js
var _excluded2 = ["eventType"];
function ownKeys4(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread4(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys4(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys4(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function Predict(_ref) {
  var userProfile = _ref.userProfile, _ref$suppressExperime = _ref.suppressExperimentalWarning, suppressExperimentalWarning = _ref$suppressExperime === void 0 ? false : _ref$suppressExperime, children = _ref.children;
  var predictRef = (0, import_react2.useRef)(null);
  if (predictRef.current === null) {
    predictRef.current = predict({
      userProfile
    });
  }
  var _useState = (0, import_react2.useState)(function() {
    return {
      userProfile: predictRef.current.getUserProfile(),
      affinities: predictRef.current.getAffinities(),
      funnelStage: predictRef.current.getFunnelStage(),
      orderValue: predictRef.current.getOrderValue(),
      cartAbandonment: predictRef.current.getCartAbandonment(),
      segments: predictRef.current.getSegments(),
      zones: predictRef.current.getZones(),
      addZone: predictRef.current.addZone,
      removeZone: predictRef.current.removeZone,
      updateZone: predictRef.current.updateZone,
      subscribe: predictRef.current.subscribe
    };
  }), _useState2 = _slicedToArray(_useState, 2), predictApi = _useState2[0], setPredictApi = _useState2[1];
  var _useState3 = (0, import_react2.useState)(function() {
    return predictRef.current.getUserProfile();
  }), _useState4 = _slicedToArray(_useState3, 2), prevUserProfile = _useState4[0], setPrevUserProfile = _useState4[1];
  if (!dequal(userProfile, prevUserProfile)) {
    predictRef.current.update({
      userProfile
    });
    setPrevUserProfile(userProfile);
  }
  var store = (0, import_shim.useSyncExternalStore)((0, import_react2.useCallback)(function() {
    return predictRef.current.subscribe(function(_ref2) {
      var eventType = _ref2.eventType, state = _objectWithoutProperties(_ref2, _excluded2);
      if (eventType !== "ZONE_UPDATED") {
        setPredictApi(function(prev) {
          return _objectSpread4(_objectSpread4({}, prev), state);
        });
      }
    });
  }, []), function() {
    return predictApi;
  }, function() {
    return predictApi;
  });
  (0, import_react2.useEffect)(function() {
    true ? warn(suppressExperimentalWarning, "This version is experimental and not production-ready.\n\nPlease report any bugs at https://github.com/algolia/predict/issues/new\n\n(To disable this warning, pass `suppressExperimentalWarning` to <Predict>.)") : void 0;
  }, [suppressExperimentalWarning]);
  return import_react2.default.createElement(PredictContext.Provider, {
    value: store
  }, children);
}

// node_modules/@algolia/predict-react/dist/esm/PredictZone.js
var import_react6 = __toESM(require_react());
var import_shim2 = __toESM(require_shim());

// node_modules/@algolia/predict-react/dist/esm/lib/PredictZoneContext.js
var import_react3 = __toESM(require_react());
var PredictZoneContext = (0, import_react3.createContext)(null);
if (true) {
  PredictZoneContext.displayName = "PredictZone";
}

// node_modules/@algolia/predict-react/dist/esm/lib/usePredictContext.js
var import_react4 = __toESM(require_react());
function usePredictContext() {
  var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$errorMessage = _ref.errorMessage, errorMessage = _ref$errorMessage === void 0 ? "The Predict APIs must be used within the <Predict> provider." : _ref$errorMessage;
  var context = (0, import_react4.useContext)(PredictContext);
  invariant(context !== null, errorMessage);
  return context;
}

// node_modules/@algolia/predict-react/dist/esm/lib/useStableValue.js
var import_react5 = __toESM(require_react());
function useStableValue(value) {
  var _useState = (0, import_react5.useState)(function() {
    return value;
  }), _useState2 = _slicedToArray(_useState, 2), stableValue = _useState2[0], setStableValue = _useState2[1];
  if (!dequal(stableValue, value)) {
    setStableValue(value);
  }
  return stableValue;
}

// node_modules/@algolia/predict-react/dist/esm/usePredict.js
var _excluded3 = ["addZone", "removeZone", "updateZone", "subscribe"];
function usePredict() {
  var _usePredictContext = usePredictContext({
    errorMessage: "`usePredict()` must be used within the <Predict> provider."
  }), addZone = _usePredictContext.addZone, removeZone = _usePredictContext.removeZone, updateZone = _usePredictContext.updateZone, subscribe = _usePredictContext.subscribe, rest = _objectWithoutProperties(_usePredictContext, _excluded3);
  var predictApi = useStableValue(rest);
  return predictApi;
}

// node_modules/@algolia/predict-react/dist/esm/PredictZone.js
var _excluded4 = ["id", "children", "name", "segment", "fallback"];
function ownKeys5(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread5(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys5(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys5(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function PredictZone(_ref) {
  var id = _ref.id, children = _ref.children, name = _ref.name, segment = _ref.segment, _ref$fallback = _ref.fallback, fallback = _ref$fallback === void 0 ? null : _ref$fallback, props = _objectWithoutProperties(_ref, _excluded4);
  var _usePredictContext = usePredictContext({
    errorMessage: "The <PredictZone> must be mounted within the <Predict> provider."
  }), addZone = _usePredictContext.addZone, removeZone = _usePredictContext.removeZone, updateZone = _usePredictContext.updateZone;
  var predictApi = usePredict();
  var _useState = (0, import_react6.useState)(function() {
    var active2 = typeof segment === "function" ? segment(predictApi) : segment ? Boolean(predictApi.segments.find(function(s) {
      return s.name === segment;
    })) : true;
    return createZone({
      id,
      name,
      active: active2
    });
  }), _useState2 = _slicedToArray(_useState, 2), zone = _useState2[0], setZone = _useState2[1];
  var _useState3 = (0, import_react6.useState)(false), _useState4 = _slicedToArray(_useState3, 2), isDismissed = _useState4[0], setIsDismissed = _useState4[1];
  var _useState5 = (0, import_react6.useState)(zone.name), _useState6 = _slicedToArray(_useState5, 2), prevName = _useState6[0], setPrevName = _useState6[1];
  if (name !== prevName) {
    setPrevName(name);
    updateZone({
      id: zone.id,
      name
    });
  }
  if (!isDismissed) {
    var active = typeof segment === "function" ? segment(predictApi) : segment ? Boolean(predictApi.segments.find(function(s) {
      return s.name === segment;
    })) : zone.active;
    if (active !== zone.active) {
      setZone(function(prev) {
        return _objectSpread5(_objectSpread5({}, prev), {}, {
          active
        });
      });
      updateZone({
        id: zone.id,
        active
      });
    }
  }
  var zoneApi = (0, import_react6.useMemo)(function() {
    return {
      dismissZone: function dismissZone() {
        setZone(function(prev) {
          return _objectSpread5(_objectSpread5({}, prev), {}, {
            active: false,
            happened: true
          });
        });
        updateZone({
          id: zone.id,
          active: false,
          happened: true
        });
        setIsDismissed(true);
      }
    };
  }, [updateZone, zone.id]);
  var zoneStore = (0, import_shim2.useSyncExternalStore)((0, import_react6.useCallback)(function() {
    addZone(zone);
    return function() {
      removeZone(zone);
    };
  }, [addZone, removeZone]), function() {
    return zoneApi;
  }, function() {
    return zoneApi;
  });
  if (!zone.active) {
    return import_react6.default.createElement(import_react6.default.Fragment, null, fallback);
  }
  return import_react6.default.createElement(PredictZoneContext.Provider, {
    value: zoneStore
  }, import_react6.default.createElement("div", _extends({}, props, {
    "data-predictzoneid": zone.id,
    onMouseDown: function onMouseDown() {
      setZone(function(prev) {
        return _objectSpread5(_objectSpread5({}, prev), {}, {
          happened: true
        });
      });
      updateZone({
        id: zone.id,
        happened: true
      });
    },
    onTouchStart: function onTouchStart() {
      setZone(function(prev) {
        return _objectSpread5(_objectSpread5({}, prev), {}, {
          happened: true
        });
      });
      updateZone({
        id: zone.id,
        happened: true
      });
    }
  }), children));
}

// node_modules/@algolia/predict-react/dist/esm/usePredictZone.js
var import_react7 = __toESM(require_react());
function usePredictZone() {
  var context = (0, import_react7.useContext)(PredictZoneContext);
  invariant(context !== null, "`usePredictZone()` must be used within a <PredictZone>.");
  return context;
}

// node_modules/@algolia/predict-react/dist/esm/version.js
var version2 = "1.4.0";
export {
  Predict,
  PredictZone,
  usePredict,
  usePredictZone,
  version2 as version
};
//# sourceMappingURL=@algolia_predict-react.js.map

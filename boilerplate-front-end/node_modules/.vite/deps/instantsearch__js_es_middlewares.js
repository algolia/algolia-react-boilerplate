import {
  createMetadataMiddleware,
  createRouterMiddleware,
  getInsightsAnonymousUserTokenInternal,
  isMetadataEnabled
} from "./chunk-YGLZMKVF.js";
import {
  _warning,
  find,
  getAppIdAndApiKey,
  noop
} from "./chunk-ZOL66D5U.js";
import "./chunk-J43GMYXM.js";

// node_modules/instantsearch.js/es/middlewares/createInsightsMiddleware.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function createInsightsMiddleware(props) {
  var _ref = props || {}, _insightsClient = _ref.insightsClient, insightsInitParams = _ref.insightsInitParams, onEvent = _ref.onEvent;
  if (_insightsClient !== null && !_insightsClient) {
    if (true) {
      throw new Error("The `insightsClient` option is required if you want userToken to be automatically set in search calls. If you don't want this behaviour, set it to `null`.");
    } else {
      throw new Error("The `insightsClient` option is required. To disable, set it to `null`.");
    }
  }
  var hasInsightsClient = Boolean(_insightsClient);
  var insightsClient = _insightsClient === null ? noop : _insightsClient;
  return function(_ref2) {
    var instantSearchInstance = _ref2.instantSearchInstance;
    var _getAppIdAndApiKey = getAppIdAndApiKey(instantSearchInstance.client), _getAppIdAndApiKey2 = _slicedToArray(_getAppIdAndApiKey, 2), appId = _getAppIdAndApiKey2[0], apiKey = _getAppIdAndApiKey2[1];
    if (!(appId && apiKey)) {
      throw new Error("[insights middleware]: could not extract Algolia credentials from searchClient");
    }
    var queuedUserToken = void 0;
    var userTokenBeforeInit = void 0;
    if (Array.isArray(insightsClient.queue)) {
      var _ref3 = find(insightsClient.queue.slice().reverse(), function(_ref5) {
        var _ref6 = _slicedToArray(_ref5, 1), method = _ref6[0];
        return method === "setUserToken";
      }) || [];
      var _ref4 = _slicedToArray(_ref3, 2);
      queuedUserToken = _ref4[1];
    }
    insightsClient("getUserToken", null, function(_error, userToken) {
      userTokenBeforeInit = userToken;
    });
    insightsClient("init", _objectSpread({
      appId,
      apiKey
    }, insightsInitParams));
    var initialParameters;
    var helper;
    return {
      onStateChange: function onStateChange() {
      },
      subscribe: function subscribe() {
      },
      started: function started() {
        insightsClient("addAlgoliaAgent", "insights-middleware");
        helper = instantSearchInstance.helper;
        initialParameters = {
          userToken: helper.state.userToken,
          clickAnalytics: helper.state.clickAnalytics
        };
        helper.overrideStateWithoutTriggeringChangeEvent(_objectSpread(_objectSpread({}, helper.state), {}, {
          clickAnalytics: true
        }));
        instantSearchInstance.scheduleSearch();
        var setUserTokenToSearch = function setUserTokenToSearch2(userToken) {
          helper.overrideStateWithoutTriggeringChangeEvent(_objectSpread(_objectSpread({}, helper.state), {}, {
            userToken
          }));
          instantSearchInstance.scheduleSearch();
        };
        var anonymousUserToken = getInsightsAnonymousUserTokenInternal();
        if (hasInsightsClient && anonymousUserToken) {
          setUserTokenToSearch(anonymousUserToken);
        }
        if (userTokenBeforeInit) {
          insightsClient("setUserToken", userTokenBeforeInit);
        } else if (queuedUserToken) {
          insightsClient("setUserToken", queuedUserToken);
        }
        insightsClient("onUserTokenChange", setUserTokenToSearch, {
          immediate: true
        });
        instantSearchInstance.sendEventToInsights = function(event) {
          if (onEvent) {
            onEvent(event, _insightsClient);
          } else if (event.insightsMethod) {
            var hasUserToken = Boolean(helper.state.userToken);
            if (hasUserToken) {
              insightsClient(event.insightsMethod, event.payload);
            } else {
              true ? _warning(false, "\nCannot send event to Algolia Insights because `userToken` is not set.\n\nSee documentation: https://www.algolia.com/doc/guides/building-search-ui/going-further/send-insights-events/js/#setting-the-usertoken\n") : void 0;
            }
          } else {
            true ? _warning(false, "Cannot send event to Algolia Insights because `insightsMethod` option is missing.") : void 0;
          }
        };
      },
      unsubscribe: function unsubscribe() {
        insightsClient("onUserTokenChange", void 0);
        instantSearchInstance.sendEventToInsights = noop;
        if (helper && initialParameters) {
          helper.setState(_objectSpread(_objectSpread({}, helper.state), initialParameters));
          instantSearchInstance.scheduleSearch();
        }
      }
    };
  };
}
export {
  createInsightsMiddleware,
  createMetadataMiddleware,
  createRouterMiddleware,
  isMetadataEnabled
};
//# sourceMappingURL=instantsearch__js_es_middlewares.js.map

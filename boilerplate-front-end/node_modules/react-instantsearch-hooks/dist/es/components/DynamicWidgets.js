import _typeof from "@babel/runtime/helpers/esm/typeof";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["children", "fallbackComponent"];
import React, { Fragment } from 'react';
import { useDynamicWidgets } from "../connectors/useDynamicWidgets.js";
import { invariant } from "../lib/invariant.js";

function FallbackComponent() {
  return null;
}

export function DynamicWidgets(_ref) {
  var children = _ref.children,
      _ref$fallbackComponen = _ref.fallbackComponent,
      Fallback = _ref$fallbackComponen === void 0 ? FallbackComponent : _ref$fallbackComponen,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useDynamicWidgets = useDynamicWidgets(props, {
    $$widgetType: 'ais.dynamicWidgets'
  }),
      attributesToRender = _useDynamicWidgets.attributesToRender;

  var widgets = new Map();
  React.Children.forEach(children, function (child) {
    var attribute = getWidgetAttribute(child);
    invariant(attribute !== undefined, "<DynamicWidgets> only supports InstantSearch widgets with an `attribute` or `attributes` prop.");
    widgets.set(attribute, child);
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, attributesToRender.map(function (attribute) {
    return /*#__PURE__*/React.createElement(Fragment, {
      key: attribute
    }, widgets.get(attribute) || /*#__PURE__*/React.createElement(Fallback, {
      attribute: attribute
    }));
  }));
}

function isReactElement(element) {
  return _typeof(element) === 'object' && element.props;
}

function getWidgetAttribute(element) {
  if (!isReactElement(element)) {
    return undefined;
  }

  if (element.props.attribute) {
    return element.props.attribute;
  }

  if (Array.isArray(element.props.attributes)) {
    return element.props.attributes[0];
  }

  if (element.props.children) {
    invariant(React.Children.count(element.props.children) === 1, "<DynamicWidgets> only supports a single component in nested components. Make sure to not render multiple children in a parent component.\n\nExample of an unsupported scenario:\n\n```\n<DynamicWidgets>\n  <MyComponent>\n    <RefinementList attribute=\"brand\" />\n    <Menu attribute=\"categories\" />\n  </MyComponent>\n</DynamicWidgets>\n```\n");
    return getWidgetAttribute(React.Children.only(element.props.children));
  }

  return undefined;
}
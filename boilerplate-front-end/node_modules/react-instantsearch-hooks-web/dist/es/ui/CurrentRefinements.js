import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["classNames", "items", "onRemove", "hasRefinements"];
import React from 'react';
import { cx } from "./lib/cx.js";
import { isModifierClick } from "./lib/isModifierClick.js";
export function CurrentRefinements(_ref) {
  var _ref$classNames = _ref.classNames,
      classNames = _ref$classNames === void 0 ? {} : _ref$classNames,
      _ref$items = _ref.items,
      items = _ref$items === void 0 ? [] : _ref$items,
      _ref$onRemove = _ref.onRemove,
      onRemove = _ref$onRemove === void 0 ? function () {} : _ref$onRemove,
      _ref$hasRefinements = _ref.hasRefinements,
      hasRefinements = _ref$hasRefinements === void 0 ? false : _ref$hasRefinements,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement("div", _extends({}, props, {
    className: cx('ais-CurrentRefinements', classNames.root, !hasRefinements && cx('ais-CurrentRefinements--noRefinement', classNames.noRefinementRoot), props.className)
  }), /*#__PURE__*/React.createElement("ul", {
    className: cx('ais-CurrentRefinements-list', classNames.list, !hasRefinements && cx('ais-CurrentRefinements-list--noRefinement', classNames.noRefinementList))
  }, items.map(function (item) {
    return /*#__PURE__*/React.createElement("li", {
      key: [item.indexName, item.label].join('/'),
      className: cx('ais-CurrentRefinements-item', classNames.item)
    }, /*#__PURE__*/React.createElement("span", {
      className: cx('ais-CurrentRefinements-label', classNames.label)
    }, item.label, ":"), item.refinements.map(function (refinement) {
      return /*#__PURE__*/React.createElement("span", {
        key: refinement.label,
        className: cx('ais-CurrentRefinements-category', classNames.category)
      }, /*#__PURE__*/React.createElement("span", {
        className: cx('ais-CurrentRefinements-categoryLabel', classNames.categoryLabel)
      }, refinement.label), /*#__PURE__*/React.createElement("button", {
        type: "button",
        onClick: function onClick(event) {
          if (isModifierClick(event)) {
            return;
          }

          onRemove(refinement);
        },
        className: cx('ais-CurrentRefinements-delete', classNames.delete)
      }, "\u2715"));
    }));
  })));
}
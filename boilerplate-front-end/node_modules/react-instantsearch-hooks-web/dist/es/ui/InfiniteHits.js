import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["hitComponent", "hits", "sendEvent", "isFirstPage", "isLastPage", "onShowPrevious", "onShowMore", "classNames", "translations"];
import React from 'react';
import { cx } from "./lib/cx.js";

function DefaultHitComponent(_ref) {
  var hit = _ref.hit;
  return /*#__PURE__*/React.createElement("div", {
    style: {
      wordBreak: 'break-all'
    }
  }, JSON.stringify(hit).slice(0, 100), "\u2026");
}

export function InfiniteHits(_ref2) {
  var _ref2$hitComponent = _ref2.hitComponent,
      HitComponent = _ref2$hitComponent === void 0 ? DefaultHitComponent : _ref2$hitComponent,
      hits = _ref2.hits,
      sendEvent = _ref2.sendEvent,
      isFirstPage = _ref2.isFirstPage,
      isLastPage = _ref2.isLastPage,
      onShowPrevious = _ref2.onShowPrevious,
      onShowMore = _ref2.onShowMore,
      _ref2$classNames = _ref2.classNames,
      classNames = _ref2$classNames === void 0 ? {} : _ref2$classNames,
      translations = _ref2.translations,
      props = _objectWithoutProperties(_ref2, _excluded);

  return /*#__PURE__*/React.createElement("div", _extends({}, props, {
    className: cx('ais-InfiniteHits', classNames.root, hits.length === 0 && cx('ais-InfiniteHits--empty', classNames.emptyRoot), props.className)
  }), onShowPrevious && /*#__PURE__*/React.createElement("button", {
    className: cx('ais-InfiniteHits-loadPrevious', classNames.loadPrevious, isFirstPage && cx('ais-InfiniteHits-loadPrevious--disabled', classNames.disabledLoadPrevious)),
    onClick: onShowPrevious,
    disabled: isFirstPage
  }, translations.showPreviousButtonText), /*#__PURE__*/React.createElement("ol", {
    className: cx('ais-InfiniteHits-list', classNames.list)
  }, hits.map(function (hit) {
    return /*#__PURE__*/React.createElement("li", {
      key: hit.objectID,
      className: cx('ais-InfiniteHits-item', classNames.item)
    }, /*#__PURE__*/React.createElement(HitComponent, {
      hit: hit,
      sendEvent: sendEvent
    }));
  })), /*#__PURE__*/React.createElement("button", {
    className: cx('ais-InfiniteHits-loadMore', classNames.loadMore, isLastPage && cx('ais-InfiniteHits-loadMore--disabled', classNames.disabledLoadMore)),
    onClick: onShowMore,
    disabled: isLastPage
  }, translations.showMoreButtonText));
}
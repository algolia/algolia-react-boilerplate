import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["attribute", "min", "max", "precision", "translations"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import React from 'react';
import { useRange } from 'react-instantsearch-hooks';
import { RangeInput as RangeInputUiComponent } from "../ui/RangeInput.js";
export function RangeInput(_ref) {
  var attribute = _ref.attribute,
      min = _ref.min,
      max = _ref.max,
      precision = _ref.precision,
      translations = _ref.translations,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useRange = useRange({
    attribute: attribute,
    min: min,
    max: max,
    precision: precision
  }, {
    $$widgetType: 'ais.rangeInput'
  }),
      range = _useRange.range,
      start = _useRange.start,
      canRefine = _useRange.canRefine,
      refine = _useRange.refine;

  var step = 1 / Math.pow(10, precision || 0);
  var uiProps = {
    range: range,
    start: start,
    step: step,
    disabled: !canRefine,
    onSubmit: refine,
    translations: _objectSpread({
      separatorElementText: 'to',
      submitButtonText: 'Go'
    }, translations)
  };
  return /*#__PURE__*/React.createElement(RangeInputUiComponent, _extends({}, props, uiProps));
}
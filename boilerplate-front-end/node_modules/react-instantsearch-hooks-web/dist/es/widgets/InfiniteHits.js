import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["showPrevious", "cache", "escapeHTML", "showPrevious", "transformItems", "translations"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import React from 'react';
import { useInfiniteHits } from 'react-instantsearch-hooks';
import { InfiniteHits as InfiniteHitsUiComponent } from "../ui/InfiniteHits.js";
export function InfiniteHits(_ref) {
  var _ref$showPrevious = _ref.showPrevious,
      shouldShowPrevious = _ref$showPrevious === void 0 ? true : _ref$showPrevious,
      cache = _ref.cache,
      escapeHTML = _ref.escapeHTML,
      userShowPrevious = _ref.showPrevious,
      transformItems = _ref.transformItems,
      translations = _ref.translations,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useInfiniteHits = useInfiniteHits({
    cache: cache,
    escapeHTML: escapeHTML,
    showPrevious: userShowPrevious,
    transformItems: transformItems
  }, {
    $$widgetType: 'ais.infiniteHits'
  }),
      hits = _useInfiniteHits.hits,
      sendEvent = _useInfiniteHits.sendEvent,
      showPrevious = _useInfiniteHits.showPrevious,
      showMore = _useInfiniteHits.showMore,
      isFirstPage = _useInfiniteHits.isFirstPage,
      isLastPage = _useInfiniteHits.isLastPage;

  var uiProps = {
    hits: hits,
    sendEvent: sendEvent,
    onShowPrevious: shouldShowPrevious ? showPrevious : undefined,
    onShowMore: showMore,
    isFirstPage: isFirstPage,
    isLastPage: isLastPage,
    translations: _objectSpread({
      showPreviousButtonText: 'Show previous results',
      showMoreButtonText: 'Show more results'
    }, translations)
  };
  return /*#__PURE__*/React.createElement(InfiniteHitsUiComponent, _extends({}, props, uiProps));
}
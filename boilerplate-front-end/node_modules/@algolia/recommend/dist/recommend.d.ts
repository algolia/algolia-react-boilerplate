import { AuthModeType } from '@algolia/client-common';
import { ClientTransporterOptions } from '@algolia/client-common';
import { Destroyable } from '@algolia/requester-common';
import { MultipleQueriesResponse } from '@algolia/client-search';
import { RequestOptions } from '@algolia/transporter';
import { SearchOptions } from '@algolia/client-search';
import { Transporter } from '@algolia/transporter';

export declare type BaseRecommendClient = {
    /**
     * The application id.
     */
    readonly appId: string;
    /**
     * The underlying transporter.
     */
    readonly transporter: Transporter;
    /**
     * Mutates the transporter, adding the given user agent.
     */
    readonly addAlgoliaAgent: (segment: string, version?: string) => void;
    /**
     * Clears both requests and responses caches.
     */
    readonly clearCache: () => Readonly<Promise<void>>;
};

export declare type FrequentlyBoughtTogetherQuery = Omit<RecommendationsQuery, 'model' | 'fallbackParameters'>;

declare function recommend(appId: string, apiKey: string, options?: RecommendOptions): RecommendClient;

declare namespace recommend {
    var version: string;
}
export default recommend;

export declare type RecommendationsQuery = {
    /**
     * The name of the target index.
     */
    readonly indexName: string;
    /**
     * The name of the Recommendation model to use.
     */
    readonly model: RecommendModel;
    /**
     * The `objectID` of the item to get recommendations for.
     */
    readonly objectID: string;
    /**
     * Threshold for the recommendations confidence score (between 0 and 100). Only recommendations with a greater score are returned.
     */
    readonly threshold?: number;
    /**
     * How many recommendations to retrieve.
     */
    readonly maxRecommendations?: number;
    /**
     * List of [search parameters](https://www.algolia.com/doc/api-reference/search-api-parameters/) to send.
     */
    readonly queryParameters?: RecommendSearchOptions;
    /**
     * List of [search parameters](https://www.algolia.com/doc/api-reference/search-api-parameters/) to send.
     *
     * Additional filters to use as fallback when there aren’t enough recommendations.
     */
    readonly fallbackParameters?: RecommendSearchOptions;
};

export declare type RecommendClient = WithRecommendMethods<BaseRecommendClient> & Destroyable;

export declare type RecommendClientOptions = {
    /**
     * The application id.
     */
    readonly appId: string;
    /**
     * The api key.
     */
    readonly apiKey: string;
    /**
     * The auth mode type. In browser environments credentials may
     * be passed within the headers.
     */
    readonly authMode?: AuthModeType;
};

export declare type RecommendModel = 'related-products' | 'bought-together' | TrendingModel;

export declare type RecommendOptions = Partial<ClientTransporterOptions>;

export declare type RecommendSearchOptions = Omit<SearchOptions, 'page' | 'hitsPerPage' | 'offset' | 'length'>;

export declare type RelatedProductsQuery = Omit<RecommendationsQuery, 'model'>;

export declare type TrendingFacetsQuery = Omit<TrendingQuery, 'model' | 'facetValue'>;

export declare type TrendingItemsQuery = Omit<TrendingQuery, 'model'>;

export declare type TrendingModel = 'trending-items' | 'trending-facets';

export declare type TrendingQuery = {
    /**
     * The name of the target index.
     */
    readonly indexName: string;
    /**
     * The name of the Recommendation model to use.
     */
    readonly model: TrendingModel;
    /**
     * Threshold for the recommendations confidence score (between 0 and 100). Only recommendations with a greater score are returned.
     */
    readonly threshold?: number;
    /**
     * How many recommendations to retrieve.
     */
    readonly maxRecommendations?: number;
    /**
     * List of [search parameters](https://www.algolia.com/doc/api-reference/search-api-parameters/) to send.
     */
    readonly queryParameters?: RecommendSearchOptions;
    /**
     * List of [search parameters](https://www.algolia.com/doc/api-reference/search-api-parameters/) to send.
     *
     * Additional filters to use as fallback when there aren’t enough recommendations.
     */
    readonly fallbackParameters?: RecommendSearchOptions;
    /**
     * Used for trending model
     */
    readonly facetName?: string;
    /**
     * Used for trending model
     */
    readonly facetValue?: string;
};

export declare type WithRecommendMethods<TType> = TType & {
    /**
     * Returns recommendations.
     */
    readonly getRecommendations: <TObject>(queries: readonly RecommendationsQuery[], requestOptions?: RequestOptions & SearchOptions) => Readonly<Promise<MultipleQueriesResponse<TObject>>>;
    /**
     * Returns [Related Products](https://algolia.com/doc/guides/algolia-ai/recommend/#related-products).
     */
    readonly getRelatedProducts: <TObject>(queries: readonly RelatedProductsQuery[], requestOptions?: RequestOptions & SearchOptions) => Readonly<Promise<MultipleQueriesResponse<TObject>>>;
    /**
     * Returns [Frequently Bought Together](https://algolia.com/doc/guides/algolia-ai/recommend/#frequently-bought-together) products.
     */
    readonly getFrequentlyBoughtTogether: <TObject>(queries: readonly FrequentlyBoughtTogetherQuery[], requestOptions?: RequestOptions & SearchOptions) => Readonly<Promise<MultipleQueriesResponse<TObject>>>;
    /**
     * Returns trending items
     */
    readonly getTrendingItems: <TObject>(queries: readonly TrendingItemsQuery[], requestOptions?: RequestOptions & SearchOptions) => Readonly<Promise<MultipleQueriesResponse<TObject>>>;
    /**
     * Returns trending items per facet
     */
    readonly getTrendingFacets: <TObject>(queries: readonly TrendingFacetsQuery[], requestOptions?: RequestOptions & SearchOptions) => Readonly<Promise<MultipleQueriesResponse<TObject>>>;
};

export { }

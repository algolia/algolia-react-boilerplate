import type { RecommendClient, RecommendationsQuery } from '@algolia/recommend';
import { ProductRecord, RecordWithObjectID } from './types';
export declare type RecommendationsProps<TObject> = {
    /**
     * The `objectID`s of the items to get recommendations for.
     */
    objectIDs: string[];
    /**
     * The initialized Algolia recommend client.
     */
    recommendClient: RecommendClient;
    /**
     * A function to transform the retrieved items before passing them to the component.
     *
     * Itâ€™s useful to add or remove items, change them, or reorder them.
     */
    transformItems?: (items: Array<ProductRecord<TObject>>) => Array<ProductRecord<TObject>>;
};
export declare type GetRecommendationsProps<TObject> = RecommendationsProps<TObject> & Omit<RecommendationsQuery, 'objectID'>;
export declare type GetRecommendationsResult<TObject> = {
    recommendations: Array<RecordWithObjectID<TObject>>;
};
export declare function getRecommendations<TObject>({ objectIDs, recommendClient, transformItems, fallbackParameters, indexName, maxRecommendations, model, queryParameters, threshold, }: GetRecommendationsProps<TObject>): Promise<GetRecommendationsResult<TObject>>;

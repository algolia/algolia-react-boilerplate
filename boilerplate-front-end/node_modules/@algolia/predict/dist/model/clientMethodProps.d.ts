import type { FetchAllUserProfilesParams } from './fetchAllUserProfilesParams';
import type { Params } from './params';
import type { SegmentType } from './segmentType';
import type { UpdateModelParams } from './updateModelParams';
import type { UpdateSegmentParams } from './updateSegmentParams';
/**
 * Properties for the `del` method.
 */
export declare type DelProps = {
    /**
     * The path of the API endpoint to target, anything after the /1 needs to be specified.
     */
    path: string;
    /**
     * Query parameters to be applied to the current query.
     */
    parameters?: Record<string, any>;
};
/**
 * Properties for the `deleteModelInstance` method.
 */
export declare type DeleteModelInstanceProps = {
    /**
     * The ID of the model to retrieve.
     */
    modelID: string;
};
/**
 * Properties for the `deleteSegment` method.
 */
export declare type DeleteSegmentProps = {
    /**
     * The ID of the Segment to fetch.
     */
    segmentID: string;
};
/**
 * Properties for the `deleteUserProfile` method.
 */
export declare type DeleteUserProfileProps = {
    /**
     * User ID for authenticated users or cookie ID for non-authenticated repeated users (visitors).
     */
    userID: string;
};
/**
 * Properties for the `fetchAllSegments` method.
 */
export declare type FetchAllSegmentsProps = {
    /**
     * The type of segments to fetch.
     */
    type?: SegmentType;
};
/**
 * Properties for the `fetchSegment` method.
 */
export declare type FetchSegmentProps = {
    /**
     * The ID of the Segment to fetch.
     */
    segmentID: string;
};
/**
 * Properties for the `fetchUserProfile` method.
 */
export declare type FetchUserProfileProps = {
    /**
     * User ID for authenticated users or cookie ID for non-authenticated repeated users (visitors).
     */
    userID: string;
    params: Params;
};
/**
 * Properties for the `get` method.
 */
export declare type GetProps = {
    /**
     * The path of the API endpoint to target, anything after the /1 needs to be specified.
     */
    path: string;
    /**
     * Query parameters to be applied to the current query.
     */
    parameters?: Record<string, any>;
};
/**
 * Properties for the `getModelInstanceConfig` method.
 */
export declare type GetModelInstanceConfigProps = {
    /**
     * The ID of the model to retrieve.
     */
    modelID: string;
};
/**
 * Properties for the `getModelMetrics` method.
 */
export declare type GetModelMetricsProps = {
    /**
     * The ID of the model to retrieve.
     */
    modelID: string;
};
/**
 * Properties for the `getSegmentUsers` method.
 */
export declare type GetSegmentUsersProps = {
    /**
     * The ID of the Segment to fetch.
     */
    segmentID: string;
    fetchAllUserProfilesParams: FetchAllUserProfilesParams;
};
/**
 * Properties for the `post` method.
 */
export declare type PostProps = {
    /**
     * The path of the API endpoint to target, anything after the /1 needs to be specified.
     */
    path: string;
    /**
     * Query parameters to be applied to the current query.
     */
    parameters?: Record<string, any>;
    /**
     * The parameters to send with the custom request.
     */
    body?: Record<string, any>;
};
/**
 * Properties for the `put` method.
 */
export declare type PutProps = {
    /**
     * The path of the API endpoint to target, anything after the /1 needs to be specified.
     */
    path: string;
    /**
     * Query parameters to be applied to the current query.
     */
    parameters?: Record<string, any>;
    /**
     * The parameters to send with the custom request.
     */
    body?: Record<string, any>;
};
/**
 * Properties for the `updateModelInstance` method.
 */
export declare type UpdateModelInstanceProps = {
    /**
     * The ID of the model to retrieve.
     */
    modelID: string;
    updateModelParams: UpdateModelParams;
};
/**
 * Properties for the `updateSegment` method.
 */
export declare type UpdateSegmentProps = {
    /**
     * The ID of the Segment to fetch.
     */
    segmentID: string;
    updateSegmentParams: UpdateSegmentParams;
};
//# sourceMappingURL=clientMethodProps.d.ts.map
/*! predict.umd.js | 1.0.0-alpha.26 | Â© Algolia, inc. | https://github.com/algolia/algoliasearch-client-javascript */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self)["@algolia/predict"]={})}(this,(function(e){"use strict";function t(e){let t;const r=`algolia-client-js-${e.key}`;function a(){return void 0===t&&(t=e.localStorage||window.localStorage),t}function s(){return JSON.parse(a().getItem(r)||"{}")}return{get:(e,t,r={miss:()=>Promise.resolve()})=>Promise.resolve().then((()=>{const r=JSON.stringify(e),a=s()[r];return Promise.all([a||t(),void 0!==a])})).then((([e,t])=>Promise.all([e,t||r.miss(e)]))).then((([e])=>e)),set:(e,t)=>Promise.resolve().then((()=>{const n=s();return n[JSON.stringify(e)]=t,a().setItem(r,JSON.stringify(n)),t})),delete:e=>Promise.resolve().then((()=>{const t=s();delete t[JSON.stringify(e)],a().setItem(r,JSON.stringify(t))})),clear:()=>Promise.resolve().then((()=>{a().removeItem(r)}))}}function r(e){const t=[...e.caches],a=t.shift();return void 0===a?{get:(e,t,r={miss:()=>Promise.resolve()})=>t().then((e=>Promise.all([e,r.miss(e)]))).then((([e])=>e)),set:(e,t)=>Promise.resolve(t),delete:e=>Promise.resolve(),clear:()=>Promise.resolve()}:{get:(e,s,n={miss:()=>Promise.resolve()})=>a.get(e,s,n).catch((()=>r({caches:t}).get(e,s,n))),set:(e,s)=>a.set(e,s).catch((()=>r({caches:t}).set(e,s))),delete:e=>a.delete(e).catch((()=>r({caches:t}).delete(e))),clear:()=>a.clear().catch((()=>r({caches:t}).clear()))}}function a(e={serializable:!0}){let t={};return{get(r,a,s={miss:()=>Promise.resolve()}){const n=JSON.stringify(r);if(n in t)return Promise.resolve(e.serializable?JSON.parse(t[n]):t[n]);const o=a();return o.then((e=>s.miss(e))).then((()=>o))},set:(r,a)=>(t[JSON.stringify(r)]=e.serializable?JSON.stringify(a):a,Promise.resolve(a)),delete:e=>(delete t[JSON.stringify(e)],Promise.resolve()),clear:()=>(t={},Promise.resolve())}}const s=12e4;function n(e,t="up"){const r=Date.now();return{...e,status:t,lastUpdate:r,isUp:function(){return"up"===t||Date.now()-r>s},isTimedOut:function(){return"timed out"===t&&Date.now()-r<=s}}}function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}class i extends Error{constructor(e,t){super(e),o(this,"name","AlgoliaError"),t&&(this.name=t)}}class c extends i{constructor(e,t,r){super(e,r),o(this,"stackTrace",void 0),this.stackTrace=t}}class l extends c{constructor(e){super("Unreachable hosts - your application id may be incorrect. If the error persists, contact support@algolia.com.",e,"RetryError")}}class u extends c{constructor(e,t,r){super(e,r,"ApiError"),o(this,"status",void 0),this.status=t}}class d extends i{constructor(e,t){super(e,"DeserializationError"),o(this,"response",void 0),this.response=t}}function m(e,t,r){const a=function(e){const t=e=>"[object Object]"===Object.prototype.toString.call(e)||"[object Array]"===Object.prototype.toString.call(e);return Object.keys(e).map((r=>`${r}=${encodeURIComponent(t(e[r])?JSON.stringify(e[r]):e[r])}`)).join("&")}(r);let s=`${e.protocol}://${e.url}/${"/"===t.charAt(0)?t.substr(1):t}`;return a.length&&(s+=`?${a}`),s}function h(e){const t=e.request.headers["x-algolia-api-key"]?{"x-algolia-api-key":"*****"}:{};return{...e,request:{...e.request,headers:{...e.request.headers,...t}}}}function p({hosts:e,hostsCache:t,baseHeaders:r,baseQueryParameters:a,algoliaAgent:s,timeouts:o,requester:i,requestsCache:c,responsesCache:p}){async function g(c,p,g=!0){const f=[],P=function(e,t){if("GET"===e.method||void 0===e.data&&void 0===t.data)return;const r=Array.isArray(e.data)?e.data:{...e.data,...t.data};return JSON.stringify(r)}(c,p),w=function(e,t,r){const a={Accept:"application/json",...e,...t,...r},s={};return Object.keys(a).forEach((e=>{const t=a[e];s[e.toLowerCase()]=t})),s}(r,c.headers,p.headers),q="GET"===c.method?{...c.data,...p.data}:{},y={"x-algolia-agent":s.value,...a,...c.queryParameters,...q};if(p&&p.queryParameters)for(const e of Object.keys(p.queryParameters))p.queryParameters[e]&&"[object Object]"!==Object.prototype.toString.call(p.queryParameters[e])?y[e]=p.queryParameters[e].toString():y[e]=p.queryParameters[e];let I=0;const E=async(e,r)=>{const a=e.pop();if(void 0===a)throw new l(function(e){return e.map((e=>h(e)))}(f));let s=p.timeout;void 0===s&&(s=g?o.read:o.write);const q={data:P,headers:w,method:c.method,url:m(a,c.path,y),connectTimeout:r(I,o.connect),responseTimeout:r(I,s)},v=t=>{const r={request:q,response:t,host:a,triesLeft:e.length};return f.push(r),r},S=await i.send(q);if(function({isTimedOut:e,status:t}){return e||function({isTimedOut:e,status:t}){return!e&&0==~~t}({isTimedOut:e,status:t})||2!=~~(t/100)&&4!=~~(t/100)}(S)){const s=v(S);return S.isTimedOut&&I++,console.log("Retryable failure",h(s)),await t.set(a,n(a,S.isTimedOut?"timed out":"down")),E(e,r)}if(function({status:e}){return 2==~~(e/100)}(S))return function(e){try{return JSON.parse(e.content)}catch(t){throw new d(t.message,e)}}(S);throw v(S),function({content:e,status:t},r){let a=e;try{a=JSON.parse(e).message}catch(e){}return new u(a,t,r)}(S,f)},v=e.filter((e=>"readWrite"===e.accept||(g?"read"===e.accept:"write"===e.accept))),S=await async function(e){const r=await Promise.all(e.map((e=>t.get(e,(()=>Promise.resolve(n(e))))))),a=r.filter((e=>e.isUp())),s=r.filter((e=>e.isTimedOut())),o=[...a,...s];return{hosts:o.length>0?o:e,getTimeout:(e,t)=>(0===s.length&&0===e?1:s.length+3+e)*t}}(v);return E([...S.hosts].reverse(),S.getTimeout)}return{hostsCache:t,requester:i,timeouts:o,algoliaAgent:s,baseHeaders:r,baseQueryParameters:a,hosts:e,request:function(e,t={}){const s=e.useReadTransporter||"GET"===e.method;if(!s)return g(e,t,s);const n=()=>g(e,t);if(!0!==(t.cacheable||e.cacheable))return n();const o={request:e,requestOptions:t,transporter:{queryParameters:a,headers:r}};return p.get(o,(()=>c.get(o,(()=>c.set(o,n()).then((e=>Promise.all([c.delete(o),e])),(e=>Promise.all([c.delete(o),Promise.reject(e)]))).then((([e,t])=>t))))),{miss:e=>p.set(o,e)})},requestsCache:c,responsesCache:p}}function g({algoliaAgents:e,client:t,version:r}){const a=function(e){const t={value:`Algolia for JavaScript (${e})`,add(e){const r=`; ${e.segment}${void 0!==e.version?` (${e.version})`:""}`;return-1===t.value.indexOf(r)&&(t.value=`${t.value}${r}`),t}};return t}(r).add({segment:t,version:r});return e.forEach((e=>a.add(e))),a}const f="1.0.0-alpha.26",P=["eu","us"];e.apiClientVersion=f,e.predictClient=function(e,s,n,o){if(!e||"string"!=typeof e)throw new Error("`appId` is missing.");if(!s||"string"!=typeof s)throw new Error("`apiKey` is missing.");if(!n||n&&("string"!=typeof n||!P.includes(n)))throw new Error(`\`region\` is required and must be one of the following: ${P.join(", ")}`);return function({appId:e,apiKey:t,authMode:r,algoliaAgents:a,region:s,...n}){const o=function(e,t,r="WithinHeaders"){const a={"x-algolia-api-key":t,"x-algolia-application-id":e};return{headers:()=>"WithinHeaders"===r?a:{},queryParameters:()=>"WithinQueryParameters"===r?a:{}}}(e,t,r),i=p({hosts:(c=s,[{url:"predict.{region}.algolia.com".replace("{region}",c),accept:"readWrite",protocol:"https"}]),...n,algoliaAgent:g({algoliaAgents:a,client:"Predict",version:f}),baseHeaders:{"content-type":"text/plain",...o.headers(),...n.baseHeaders},baseQueryParameters:{...o.queryParameters(),...n.baseQueryParameters}});var c;return{transporter:i,appId:e,clearCache:()=>Promise.all([i.requestsCache.clear(),i.responsesCache.clear()]).then((()=>{})),get _ua(){return i.algoliaAgent.value},addAlgoliaAgent(e,t){i.algoliaAgent.add({segment:e,version:t})},activateModelInstance(e,t){if(!e)throw new Error("Parameter `activateModelParams` is required when calling `activateModelInstance`.");if(!e.type)throw new Error("Parameter `activateModelParams.type` is required when calling `activateModelInstance`.");if(!e.name)throw new Error("Parameter `activateModelParams.name` is required when calling `activateModelInstance`.");if(!e.sourceID)throw new Error("Parameter `activateModelParams.sourceID` is required when calling `activateModelInstance`.");if(!e.index)throw new Error("Parameter `activateModelParams.index` is required when calling `activateModelInstance`.");const r={method:"POST",path:"/1/predict/models",queryParameters:{},headers:{},data:e};return i.request(r,t)},createSegment(e,t){if(!e)throw new Error("Parameter `createSegmentParams` is required when calling `createSegment`.");if(!e.name)throw new Error("Parameter `createSegmentParams.name` is required when calling `createSegment`.");if(!e.conditions)throw new Error("Parameter `createSegmentParams.conditions` is required when calling `createSegment`.");const r={method:"POST",path:"/1/segments",queryParameters:{},headers:{},data:e};return i.request(r,t)},del({path:e,parameters:t},r){if(!e)throw new Error("Parameter `path` is required when calling `del`.");const a={method:"DELETE",path:"/1{path}".replace("{path}",e),queryParameters:t||{},headers:{}};return i.request(a,r)},deleteModelInstance({modelID:e},t){if(!e)throw new Error("Parameter `modelID` is required when calling `deleteModelInstance`.");const r={method:"DELETE",path:"/1/predict/models/{modelID}".replace("{modelID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return i.request(r,t)},deleteSegment({segmentID:e},t){if(!e)throw new Error("Parameter `segmentID` is required when calling `deleteSegment`.");const r={method:"DELETE",path:"/1/segments/{segmentID}".replace("{segmentID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return i.request(r,t)},deleteUserProfile({userID:e},t){if(!e)throw new Error("Parameter `userID` is required when calling `deleteUserProfile`.");const r={method:"DELETE",path:"/1/users/{userID}".replace("{userID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return i.request(r,t)},fetchAllSegments({type:e}={},t){const r={};void 0!==e&&(r.type=e.toString());const a={method:"GET",path:"/1/segments",queryParameters:r,headers:{}};return i.request(a,t)},fetchAllUserProfiles(e,t){if(!e)throw new Error("Parameter `fetchAllUserProfilesParams` is required when calling `fetchAllUserProfiles`.");const r={method:"POST",path:"/1/users",queryParameters:{},headers:{},data:e};return i.request(r,t)},fetchSegment({segmentID:e},t){if(!e)throw new Error("Parameter `segmentID` is required when calling `fetchSegment`.");const r={method:"GET",path:"/1/segments/{segmentID}".replace("{segmentID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return i.request(r,t)},fetchUserProfile({userID:e,params:t},r){if(!e)throw new Error("Parameter `userID` is required when calling `fetchUserProfile`.");if(!t)throw new Error("Parameter `params` is required when calling `fetchUserProfile`.");const a={method:"POST",path:"/1/users/{userID}/fetch".replace("{userID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:t};return i.request(a,r)},get({path:e,parameters:t},r){if(!e)throw new Error("Parameter `path` is required when calling `get`.");const a={method:"GET",path:"/1{path}".replace("{path}",e),queryParameters:t||{},headers:{}};return i.request(a,r)},getAvailableModelTypes(e){const t={method:"GET",path:"/1/predict/modeltypes",queryParameters:{},headers:{}};return i.request(t,e)},getModelInstanceConfig({modelID:e},t){if(!e)throw new Error("Parameter `modelID` is required when calling `getModelInstanceConfig`.");const r={method:"GET",path:"/1/predict/models/{modelID}".replace("{modelID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return i.request(r,t)},getModelInstances(e){const t={method:"GET",path:"/1/predict/models",queryParameters:{},headers:{}};return i.request(t,e)},getModelMetrics({modelID:e},t){if(!e)throw new Error("Parameter `modelID` is required when calling `getModelMetrics`.");const r={method:"GET",path:"/1/predict/models/{modelID}/metrics".replace("{modelID}",encodeURIComponent(e)),queryParameters:{},headers:{}};return i.request(r,t)},getSegmentUsers({segmentID:e,fetchAllUserProfilesParams:t},r){if(!e)throw new Error("Parameter `segmentID` is required when calling `getSegmentUsers`.");if(!t)throw new Error("Parameter `fetchAllUserProfilesParams` is required when calling `getSegmentUsers`.");const a={method:"POST",path:"/1/segments/{segmentID}/users".replace("{segmentID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:t};return i.request(a,r)},post({path:e,parameters:t,body:r},a){if(!e)throw new Error("Parameter `path` is required when calling `post`.");const s={method:"POST",path:"/1{path}".replace("{path}",e),queryParameters:t||{},headers:{},data:r||{}};return i.request(s,a)},put({path:e,parameters:t,body:r},a){if(!e)throw new Error("Parameter `path` is required when calling `put`.");const s={method:"PUT",path:"/1{path}".replace("{path}",e),queryParameters:t||{},headers:{},data:r||{}};return i.request(s,a)},updateModelInstance({modelID:e,updateModelParams:t},r){if(!e)throw new Error("Parameter `modelID` is required when calling `updateModelInstance`.");if(!t)throw new Error("Parameter `updateModelParams` is required when calling `updateModelInstance`.");if(!t.name)throw new Error("Parameter `updateModelParams.name` is required when calling `updateModelInstance`.");const a={method:"POST",path:"/1/predict/models/{modelID}".replace("{modelID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:t};return i.request(a,r)},updateSegment({segmentID:e,updateSegmentParams:t},r){if(!e)throw new Error("Parameter `segmentID` is required when calling `updateSegment`.");if(!t)throw new Error("Parameter `updateSegmentParams` is required when calling `updateSegment`.");const a={method:"POST",path:"/1/segments/{segmentID}".replace("{segmentID}",encodeURIComponent(e)),queryParameters:{},headers:{},data:t};return i.request(a,r)}}}({appId:e,apiKey:s,region:n,timeouts:{connect:1e3,read:2e3,write:3e4},requester:{send:function(e){return new Promise((t=>{const r=new XMLHttpRequest;r.open(e.method,e.url,!0),Object.keys(e.headers).forEach((t=>r.setRequestHeader(t,e.headers[t])));const a=(e,a)=>setTimeout((()=>{r.abort(),t({status:0,content:a,isTimedOut:!0})}),e),s=a(e.connectTimeout,"Connection timeout");let n;r.onreadystatechange=()=>{r.readyState>r.OPENED&&void 0===n&&(clearTimeout(s),n=a(e.responseTimeout,"Socket timeout"))},r.onerror=()=>{0===r.status&&(clearTimeout(s),clearTimeout(n),t({content:r.responseText||"Network request failed",status:r.status,isTimedOut:!1}))},r.onload=()=>{clearTimeout(s),clearTimeout(n),t({content:r.responseText,status:r.status,isTimedOut:!1})},r.send(e.data)}))}},algoliaAgents:[{segment:"Browser"}],authMode:"WithinQueryParameters",responsesCache:a(),requestsCache:a({serializable:!1}),hostsCache:r({caches:[t({key:`1.0.0-alpha.26-${e}`}),a()]}),...o})}}));

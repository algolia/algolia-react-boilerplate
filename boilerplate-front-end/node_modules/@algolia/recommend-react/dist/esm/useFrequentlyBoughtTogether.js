import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { getFrequentlyBoughtTogether } from '@algolia/recommend-core';
import { useEffect, useRef, useState } from 'react';
import { useAlgoliaAgent } from './useAlgoliaAgent';
import { useStableValue } from './useStableValue';
import { useStatus } from './useStatus';
export function useFrequentlyBoughtTogether(_ref) {
  var indexName = _ref.indexName,
      maxRecommendations = _ref.maxRecommendations,
      userObjectIDs = _ref.objectIDs,
      userQueryParameters = _ref.queryParameters,
      recommendClient = _ref.recommendClient,
      threshold = _ref.threshold,
      userTransformItems = _ref.transformItems;

  var _useState = useState({
    recommendations: []
  }),
      _useState2 = _slicedToArray(_useState, 2),
      result = _useState2[0],
      setResult = _useState2[1];

  var _useStatus = useStatus('loading'),
      status = _useStatus.status,
      setStatus = _useStatus.setStatus;

  var objectIDs = useStableValue(userObjectIDs);
  var queryParameters = useStableValue(userQueryParameters);
  useAlgoliaAgent({
    recommendClient: recommendClient
  });
  var transformItemsRef = useRef(userTransformItems);
  useEffect(function () {
    transformItemsRef.current = userTransformItems;
  }, [userTransformItems]);
  useEffect(function () {
    setStatus('loading');
    getFrequentlyBoughtTogether({
      indexName: indexName,
      maxRecommendations: maxRecommendations,
      objectIDs: objectIDs,
      queryParameters: queryParameters,
      recommendClient: recommendClient,
      threshold: threshold,
      transformItems: transformItemsRef.current
    }).then(function (response) {
      setResult(response);
      setStatus('idle');
    });
  }, [indexName, maxRecommendations, objectIDs, queryParameters, recommendClient, setStatus, threshold]);
  return _objectSpread(_objectSpread({}, result), {}, {
    status: status
  });
}
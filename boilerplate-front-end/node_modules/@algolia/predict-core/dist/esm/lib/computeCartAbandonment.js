export function computeCartAbandonment(funnelStage) {
  var addToCartPrediction = funnelStage.find( // The pipeline doesn't normalize the funnel stage values so we check it
  // against lowercase to support more cases.
  function (x) {
    return x.name.toLocaleLowerCase() === 'add_to_cart';
  }); // The `add_to_cart` funnel stage doesn't exist so that's not a cart abandonment
  // scenario.

  if (!addToCartPrediction) {
    return 0;
  }

  if (addToCartPrediction.probability >= // We don't use spread in the function call because Babel transformations blow
  // up the bundle size. Once we have more code that requires this syntax,
  // we can consider upgrading to:
  // Math.max(...funnelStage.map((stage) => stage.probability)) // not used for bundle optimization
  Math.max.apply(null, funnelStage.map(function (stage) {
    return stage.probability;
  }))) {
    // The `add_to_cart` prediction is the prediction that has the highest probability,
    // so this is a cart abandonment scenario.
    return 1;
  } else {
    return 0;
  }
}
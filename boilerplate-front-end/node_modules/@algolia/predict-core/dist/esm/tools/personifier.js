import { logDebug } from '../lib/logDebug';
import { createSessionStorage } from '../lib/storage';
export function createPersonifier(_ref) {
  var onPersonificationStart = _ref.onPersonificationStart,
      onPersonificationEnd = _ref.onPersonificationEnd;
  var personificationSessionStorage = createSessionStorage({
    key: 'tools/userProfile'
  });
  var personifiedUserProfile = personificationSessionStorage.get();

  var _isPersonifying = Boolean(personifiedUserProfile);

  var api = {
    isPersonifying: function isPersonifying() {
      return _isPersonifying;
    },
    start: function start(_ref2) {
      var userProfile = _ref2.userProfile;
      logDebug("Personification started with user \"".concat(userProfile.user, "\"."));
      _isPersonifying = true;
      onPersonificationStart({
        userProfile: userProfile
      });
      personificationSessionStorage.set(userProfile);
    },
    end: function end() {
      logDebug('Personification ended.');
      _isPersonifying = false;
      onPersonificationEnd();
      personificationSessionStorage.remove();
    },
    loadUserProfileFromStorage: function loadUserProfileFromStorage() {
      if (personifiedUserProfile) {
        // To avoid hydration mismatches errors in SSR frameworks like React,
        // we need to start the personification after the first browser render.
        // Unfortunately this means that there's a first render with the actual
        // user profile, and then an update in the next microtask to override it
        // with the personified user profile, resulting in a UI flash.
        // Ideally, we should find a way to override the user profile directly
        // without the hydration warning.
        // See https://beta.reactjs.org/apis/react-dom/client/hydrateRoot#handling-different-client-and-server-content
        queueMicrotask(function () {
          api.start({
            userProfile: personifiedUserProfile
          });
        });
      }
    }
  };
  return api;
}
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

export function createElementHighlighter() {
  var highlights = {};

  function unselect(id) {
    var overlay = highlights[id];

    if (overlay) {
      document.body.removeChild(overlay);
      delete highlights[id];
    }
  }

  return {
    select: function select(referenceElement, props) {
      if (highlights[props.id]) {
        // Ignore if the element is already highlighted
        return;
      }

      var _referenceElement$get = referenceElement.getBoundingClientRect(),
          height = _referenceElement$get.height,
          width = _referenceElement$get.width,
          top = _referenceElement$get.top,
          left = _referenceElement$get.left;

      var overlay = document.createElement('div');
      overlay.setAttribute('data-predicthighlightid', props.id);

      var style = _objectSpread(_objectSpread({}, props.style), {}, {
        top: "".concat(top, "px"),
        left: "".concat(left, "px"),
        height: "".concat(height, "px"),
        width: "".concat(width, "px")
      });

      Object.keys(style).forEach(function (attribute) {
        overlay.style[attribute] = style[attribute];
      });
      highlights[props.id] = overlay;
      document.body.appendChild(overlay);
    },
    unselect: unselect,
    unselectAll: function unselectAll() {
      Object.keys(highlights).forEach(function (id) {
        return unselect(id);
      });
    }
  };
}
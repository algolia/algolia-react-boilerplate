import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _excluded = ["eventType"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { runAction } from './actions';
import { createElementHighlighter } from './highlighter';
import { createPersonifier } from './personifier';
import { EXTENSION_TO_PREDICT, PREDICT_TO_EXTENSION } from './types';

var sendMessage = function sendMessage(message) {
  window.postMessage(_objectSpread({
    source: PREDICT_TO_EXTENSION
  }, message), '*');
};

export function initPredictTools(_ref) {
  var version = _ref.version,
      getContext = _ref.getContext,
      subscribe = _ref.subscribe,
      startPersonification = _ref.startPersonification,
      endPersonification = _ref.endPersonification;
  var highlighter = createElementHighlighter();
  var personifier = createPersonifier({
    onPersonificationStart: startPersonification,
    onPersonificationEnd: endPersonification
  });
  personifier.loadUserProfileFromStorage();
  /**
   * Notifies the Predict Tools from the Predict context.
   */

  function init() {
    sendMessage({
      type: 'init',
      data: {
        version: version,
        context: getContext(),
        isPersonifying: personifier.isPersonifying()
      }
    });
  } // We initialize the Predict Tools right away if the browser's DevTools are open.


  init(); // And we send any state change updates to the Predict Tools.

  subscribe(function (_ref2) {
    var eventType = _ref2.eventType,
        context = _objectWithoutProperties(_ref2, _excluded);

    sendMessage({
      type: 'state-change',
      data: {
        version: version,
        context: context,
        isPersonifying: personifier.isPersonifying()
      }
    });
  }); // Then, we listen to messages coming from the Predict Tools.

  window.addEventListener('message', function (event) {
    if (event.data.source === EXTENSION_TO_PREDICT) {
      runAction(event.data, {
        init: init,
        highlighter: highlighter,
        personifier: personifier
      });
    }
  });
}
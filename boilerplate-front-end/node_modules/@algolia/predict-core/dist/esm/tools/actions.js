import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { invariant } from '../lib/invariant';
export function runAction(message, _ref) {
  var init = _ref.init,
      highlighter = _ref.highlighter,
      personifier = _ref.personifier;
  var type = message.type,
      data = message.data;
  var actions = {
    'request-init': function requestInit() {
      // Answer back to the Predict Tools that just opened.
      init();
    },
    'request-highlight-zone': function requestHighlightZone(_ref2) {
      var zoneId = _ref2.zoneId,
          params = _ref2.params;
      var predictZoneElement = document.querySelector("[data-predictzoneid=\"".concat(zoneId, "\"]"));

      if (predictZoneElement) {
        highlighter.select(predictZoneElement, _objectSpread({
          id: zoneId
        }, params));
      }
    },
    'request-unhighlight-zone': function requestUnhighlightZone(_ref3) {
      var zoneId = _ref3.zoneId;
      highlighter.unselect(zoneId);
    },
    'request-scroll-to-zone': function requestScrollToZone(_ref4) {
      var zoneId = _ref4.zoneId;
      var predictZoneElement = document.querySelector("[data-predictzoneid=\"".concat(zoneId, "\"]"));

      if (predictZoneElement) {
        var element = predictZoneElement;

        if (element.scrollIntoViewIfNeeded) {
          element.scrollIntoViewIfNeeded();
        } else {
          predictZoneElement.scrollIntoView();
        }
      }
    },
    'request-personification-start': function requestPersonificationStart(_ref5) {
      var userProfile = _ref5.userProfile;
      personifier.start({
        userProfile: userProfile
      });
    },
    'request-personification-end': function requestPersonificationEnd() {
      personifier.end();
    },
    disconnect: function disconnect() {
      highlighter.unselectAll();
    }
  };
  var action = actions[type];
  invariant(Boolean(action), "The Predict Tools event \"".concat(type, "\" is not implemented.")); // @ts-ignore At this point we know that we're manipulating the right data

  action(data);
}
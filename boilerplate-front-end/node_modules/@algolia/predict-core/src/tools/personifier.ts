import { type UserProfile } from '@algolia/predict';

import { logDebug } from '../lib/logDebug';
import { createSessionStorage } from '../lib/storage';

export type PersonifierParams = {
  onPersonificationStart: (params: { userProfile: UserProfile }) => void;
  onPersonificationEnd: () => void;
};

export function createPersonifier({
  onPersonificationStart,
  onPersonificationEnd,
}: PersonifierParams) {
  const personificationSessionStorage = createSessionStorage<UserProfile>({
    key: 'tools/userProfile',
  });
  const personifiedUserProfile = personificationSessionStorage.get();
  let isPersonifying = Boolean(personifiedUserProfile);

  const api = {
    isPersonifying() {
      return isPersonifying;
    },
    start({ userProfile }: { userProfile: UserProfile }) {
      logDebug(`Personification started with user "${userProfile.user}".`);

      isPersonifying = true;
      onPersonificationStart({ userProfile });
      personificationSessionStorage.set(userProfile);
    },
    end() {
      logDebug('Personification ended.');

      isPersonifying = false;
      onPersonificationEnd();
      personificationSessionStorage.remove();
    },
    loadUserProfileFromStorage() {
      if (personifiedUserProfile) {
        // To avoid hydration mismatches errors in SSR frameworks like React,
        // we need to start the personification after the first browser render.
        // Unfortunately this means that there's a first render with the actual
        // user profile, and then an update in the next microtask to override it
        // with the personified user profile, resulting in a UI flash.
        // Ideally, we should find a way to override the user profile directly
        // without the hydration warning.
        // See https://beta.reactjs.org/apis/react-dom/client/hydrateRoot#handling-different-client-and-server-content
        queueMicrotask(() => {
          api.start({ userProfile: personifiedUserProfile });
        });
      }
    },
  };

  return api;
}

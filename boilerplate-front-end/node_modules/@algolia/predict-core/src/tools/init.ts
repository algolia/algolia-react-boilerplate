import { type PredictApi, type PredictCoreApi } from '../predict';

import { runAction } from './actions';
import { createElementHighlighter } from './highlighter';
import { createPersonifier, type PersonifierParams } from './personifier';
import {
  EXTENSION_TO_PREDICT,
  PREDICT_TO_EXTENSION,
  type SendPredictMessage,
} from './types';

export type PredictActions = {
  init: (params: {
    version: string;
    context: PredictApi;
    isPersonifying: boolean;
  }) => void;
  'state-change': (params: {
    version: string;
    context: PredictApi;
    isPersonifying: boolean;
  }) => void;
};

const sendMessage: SendPredictMessage = (message) => {
  window.postMessage({ source: PREDICT_TO_EXTENSION, ...message }, '*');
};

type InitPredictToolsParams = {
  version: string;
  getContext: () => PredictApi;
  subscribe: PredictCoreApi['subscribe'];
  startPersonification: PersonifierParams['onPersonificationStart'];
  endPersonification: PersonifierParams['onPersonificationEnd'];
};

export function initPredictTools({
  version,
  getContext,
  subscribe,
  startPersonification,
  endPersonification,
}: InitPredictToolsParams) {
  const highlighter = createElementHighlighter();
  const personifier = createPersonifier({
    onPersonificationStart: startPersonification,
    onPersonificationEnd: endPersonification,
  });

  personifier.loadUserProfileFromStorage();

  /**
   * Notifies the Predict Tools from the Predict context.
   */
  function init() {
    sendMessage({
      type: 'init',
      data: {
        version,
        context: getContext(),
        isPersonifying: personifier.isPersonifying(),
      },
    });
  }

  // We initialize the Predict Tools right away if the browser's DevTools are open.
  init();

  // And we send any state change updates to the Predict Tools.
  subscribe(({ eventType, ...context }) => {
    sendMessage({
      type: 'state-change',
      data: {
        version,
        context,
        isPersonifying: personifier.isPersonifying(),
      },
    });
  });

  // Then, we listen to messages coming from the Predict Tools.
  window.addEventListener('message', (event) => {
    if (event.data.source === EXTENSION_TO_PREDICT) {
      runAction(event.data, {
        init,
        highlighter,
        personifier,
      });
    }
  });
}

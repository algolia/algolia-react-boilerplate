export function createElementHighlighter() {
  const highlights: Record<string, HTMLElement> = {};

  function unselect(id: string) {
    const overlay = highlights[id];

    if (overlay) {
      document.body.removeChild(overlay);
      delete highlights[id];
    }
  }

  return {
    select(
      referenceElement: HTMLElement,
      props: { id: string; style: object }
    ) {
      if (highlights[props.id]) {
        // Ignore if the element is already highlighted
        return;
      }

      const { height, width, top, left } =
        referenceElement.getBoundingClientRect();

      const overlay = document.createElement('div');
      overlay.setAttribute('data-predicthighlightid', props.id);
      const style = {
        ...props.style,
        top: `${top}px`,
        left: `${left}px`,
        height: `${height}px`,
        width: `${width}px`,
      };
      Object.keys(style).forEach((attribute) => {
        overlay!.style[attribute] = style[attribute];
      });

      highlights[props.id] = overlay;
      document.body.appendChild(overlay);
    },
    unselect,
    unselectAll() {
      Object.keys(highlights).forEach((id) => unselect(id));
    },
  };
}

import { type UserProfile } from '@algolia/predict';

import { invariant } from '../lib/invariant';

import { createElementHighlighter } from './highlighter';
import { createPersonifier } from './personifier';
import {
  type PredictToolsMessage,
  type PredictToolsMessageType,
} from './types';

type ZoneActionProps = {
  zoneId: string;
};
type ZoneHighlightActionProps = ZoneActionProps & {
  params: { style: Record<string, any> };
};

export type PredictToolsActions = {
  'request-init': (params: Record<string, never>) => void;
  'request-highlight-zone': ({
    zoneId,
    params,
  }: ZoneHighlightActionProps) => void;
  'request-unhighlight-zone': ({ zoneId }: ZoneActionProps) => void;
  'request-scroll-to-zone': ({ zoneId }: ZoneActionProps) => void;
  'request-personification-start': ({
    userProfile,
  }: {
    userProfile: UserProfile;
  }) => void;
  'request-personification-end': (params: Record<string, never>) => void;
  disconnect: (params: Record<string, never>) => void;
};

type ActionApi = {
  init: () => void;
  highlighter: ReturnType<typeof createElementHighlighter>;
  personifier: ReturnType<typeof createPersonifier>;
};

export function runAction(
  message: PredictToolsMessage<PredictToolsMessageType>,
  { init, highlighter, personifier }: ActionApi
) {
  const { type, data } = message;

  const actions: PredictToolsActions = {
    'request-init': () => {
      // Answer back to the Predict Tools that just opened.
      init();
    },
    'request-highlight-zone': ({ zoneId, params }) => {
      const predictZoneElement = document.querySelector<HTMLElement>(
        `[data-predictzoneid="${zoneId}"]`
      );

      if (predictZoneElement) {
        highlighter.select(predictZoneElement, { id: zoneId, ...params });
      }
    },
    'request-unhighlight-zone': ({ zoneId }) => {
      highlighter.unselect(zoneId);
    },
    'request-scroll-to-zone': ({ zoneId }: ZoneActionProps) => {
      const predictZoneElement = document.querySelector<HTMLElement>(
        `[data-predictzoneid="${zoneId}"]`
      );

      if (predictZoneElement) {
        const element: HTMLElement & {
          /**
           * @link https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoViewIfNeeded
           */
          scrollIntoViewIfNeeded?: (centerIfNeeded?: boolean) => void;
        } = predictZoneElement;

        if (element.scrollIntoViewIfNeeded) {
          element.scrollIntoViewIfNeeded();
        } else {
          predictZoneElement.scrollIntoView();
        }
      }
    },
    'request-personification-start': ({ userProfile }) => {
      personifier.start({ userProfile });
    },
    'request-personification-end': () => {
      personifier.end();
    },
    disconnect: () => {
      highlighter.unselectAll();
    },
  };

  const action = actions[type];

  invariant(
    Boolean(action),
    `The Predict Tools event "${type}" is not implemented.`
  );

  // @ts-ignore At this point we know that we're manipulating the right data
  action(data);
}

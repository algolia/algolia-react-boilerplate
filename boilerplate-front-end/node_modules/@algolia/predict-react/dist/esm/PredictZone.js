import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["id", "children", "name", "segment", "fallback"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import { createZone } from '@algolia/predict-core';
import React, { useCallback, useMemo, useState } from 'react';
import { useSyncExternalStore } from 'use-sync-external-store/shim';
import { PredictZoneContext } from './lib/PredictZoneContext';
import { usePredictContext } from './lib/usePredictContext';
import { usePredict } from './usePredict';
export function PredictZone(_ref) {
  var id = _ref.id,
      children = _ref.children,
      name = _ref.name,
      segment = _ref.segment,
      _ref$fallback = _ref.fallback,
      fallback = _ref$fallback === void 0 ? null : _ref$fallback,
      props = _objectWithoutProperties(_ref, _excluded);

  var _usePredictContext = usePredictContext({
    errorMessage: 'The <PredictZone> must be mounted within the <Predict> provider.'
  }),
      addZone = _usePredictContext.addZone,
      removeZone = _usePredictContext.removeZone,
      updateZone = _usePredictContext.updateZone;

  var predictApi = usePredict();

  var _useState = useState(function () {
    var active = // eslint-disable-next-line no-nested-ternary
    typeof segment === 'function' ? segment(predictApi) : segment ? Boolean(predictApi.segments.find(function (s) {
      return s.name === segment;
    })) : true;
    return createZone({
      id: id,
      name: name,
      active: active
    });
  }),
      _useState2 = _slicedToArray(_useState, 2),
      zone = _useState2[0],
      setZone = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isDismissed = _useState4[0],
      setIsDismissed = _useState4[1];

  var _useState5 = useState(zone.name),
      _useState6 = _slicedToArray(_useState5, 2),
      prevName = _useState6[0],
      setPrevName = _useState6[1];

  if (name !== prevName) {
    setPrevName(name);
    updateZone({
      id: zone.id,
      name: name
    });
  }

  if (!isDismissed) {
    var active = // eslint-disable-next-line no-nested-ternary
    typeof segment === 'function' ? segment(predictApi) : segment ? Boolean(predictApi.segments.find(function (s) {
      return s.name === segment;
    })) : zone.active;

    if (active !== zone.active) {
      setZone(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          active: active
        });
      });
      updateZone({
        id: zone.id,
        active: active
      });
    }
  }

  var zoneApi = useMemo(function () {
    return {
      dismissZone: function dismissZone() {
        setZone(function (prev) {
          return _objectSpread(_objectSpread({}, prev), {}, {
            active: false,
            happened: true
          });
        });
        updateZone({
          id: zone.id,
          active: false,
          happened: true
        });
        setIsDismissed(true);
      }
    };
  }, [updateZone, zone.id]);
  var zoneStore = useSyncExternalStore(useCallback(function () {
    addZone(zone);
    return function () {
      removeZone(zone);
    }; // We don't track zone changes because we update the zone in the store via
    // `updateZone()`.
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [addZone, removeZone]), function () {
    return zoneApi;
  }, function () {
    return zoneApi;
  });

  if (!zone.active) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, fallback);
  }

  return /*#__PURE__*/React.createElement(PredictZoneContext.Provider, {
    value: zoneStore
  }, /*#__PURE__*/React.createElement("div", _extends({}, props, {
    "data-predictzoneid": zone.id,
    onMouseDown: function onMouseDown() {
      setZone(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          happened: true
        });
      });
      updateZone({
        id: zone.id,
        happened: true
      });
    },
    onTouchStart: function onTouchStart() {
      setZone(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          happened: true
        });
      });
      updateZone({
        id: zone.id,
        happened: true
      });
    }
  }), children));
}
import { init } from "./init";
import { addAlgoliaAgent } from "./_algoliaAgent";
import { getUserToken, setUserToken, onUserTokenChange } from "./_tokenUtils";
import { clickedObjectIDsAfterSearch, clickedObjectIDs, clickedFilters } from "./click";
import { convertedObjectIDsAfterSearch, convertedObjectIDs, convertedFilters } from "./conversion";
import { viewedObjectIDs, viewedFilters } from "./view";
import { getVersion } from "./_getVersion";
import { makeSendEvents } from "./_sendEvent";
export declare type InsightsMethodMap = {
    init: Parameters<typeof init>;
    getVersion: Parameters<typeof getVersion>;
    addAlgoliaAgent: Parameters<typeof addAlgoliaAgent>;
    setUserToken: Parameters<typeof setUserToken>;
    getUserToken: Parameters<typeof getUserToken>;
    onUserTokenChange: Parameters<typeof onUserTokenChange>;
    clickedObjectIDsAfterSearch: Parameters<typeof clickedObjectIDsAfterSearch>;
    clickedObjectIDs: Parameters<typeof clickedObjectIDs>;
    clickedFilters: Parameters<typeof clickedFilters>;
    convertedObjectIDsAfterSearch: Parameters<typeof convertedObjectIDsAfterSearch>;
    convertedObjectIDs: Parameters<typeof convertedObjectIDs>;
    convertedFilters: Parameters<typeof convertedFilters>;
    viewedObjectIDs: Parameters<typeof viewedObjectIDs>;
    viewedFilters: Parameters<typeof viewedFilters>;
    sendEvents: Parameters<ReturnType<typeof makeSendEvents>>;
};
declare type MethodType<MethodName extends keyof InsightsMethodMap> = (method: MethodName, ...args: InsightsMethodMap[MethodName]) => void;
export declare type Init = MethodType<"init">;
export declare type GetVersion = MethodType<"getVersion">;
export declare type AddAlgoliaAgent = MethodType<"addAlgoliaAgent">;
export declare type SetUserToken = MethodType<"setUserToken">;
export declare type GetUserToken = MethodType<"getUserToken">;
export declare type OnUserTokenChange = MethodType<"onUserTokenChange">;
export declare type ClickedObjectIDsAfterSearch = MethodType<"clickedObjectIDsAfterSearch">;
export declare type ClickedObjectIDs = MethodType<"clickedObjectIDs">;
export declare type ClickedFilters = MethodType<"clickedFilters">;
export declare type ConvertedObjectIDsAfterSearch = MethodType<"convertedObjectIDsAfterSearch">;
export declare type ConvertedObjectIDs = MethodType<"convertedObjectIDs">;
export declare type ConvertedFilters = MethodType<"convertedFilters">;
export declare type ViewedObjectIDs = MethodType<"viewedObjectIDs">;
export declare type ViewedFilters = MethodType<"viewedFilters">;
export declare type SendEvents = MethodType<"sendEvents">;
export declare type InsightsClient = <MethodName extends keyof InsightsMethodMap>(method: MethodName, ...args: InsightsMethodMap[MethodName]) => void;
export declare type InsightsEventType = "click" | "conversion" | "view";
export declare type InsightsEvent = {
    eventType: InsightsEventType;
    eventName: string;
    userToken?: string;
    timestamp?: number;
    index: string;
    queryID?: string;
    objectIDs?: string[];
    positions?: number[];
    filters?: string[];
};
export {};

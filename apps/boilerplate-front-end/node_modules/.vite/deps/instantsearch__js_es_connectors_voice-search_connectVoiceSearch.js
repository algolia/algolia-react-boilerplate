import {
  checkRendering,
  createDocumentationMessageGenerator,
  noop
} from "./chunk-55APF4AS.js";
import "./chunk-J43GMYXM.js";

// ../../node_modules/.pnpm/instantsearch.js@4.49.2_algoliasearch@4.14.2/node_modules/instantsearch.js/es/lib/voiceSearchHelper/index.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var createVoiceSearchHelper = function createVoiceSearchHelper2(_ref) {
  var searchAsYouSpeak = _ref.searchAsYouSpeak, language = _ref.language, onQueryChange = _ref.onQueryChange, onStateChange = _ref.onStateChange;
  var SpeechRecognitionAPI = window.webkitSpeechRecognition || window.SpeechRecognition;
  var getDefaultState = function getDefaultState2(status) {
    return {
      status,
      transcript: "",
      isSpeechFinal: false,
      errorCode: void 0
    };
  };
  var state = getDefaultState("initial");
  var recognition;
  var isBrowserSupported = function isBrowserSupported2() {
    return Boolean(SpeechRecognitionAPI);
  };
  var isListening = function isListening2() {
    return state.status === "askingPermission" || state.status === "waiting" || state.status === "recognizing";
  };
  var setState = function setState2() {
    var newState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    state = _objectSpread(_objectSpread({}, state), newState);
    onStateChange();
  };
  var getState = function getState2() {
    return state;
  };
  var resetState = function resetState2() {
    var status = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "initial";
    setState(getDefaultState(status));
  };
  var onStart = function onStart2() {
    setState({
      status: "waiting"
    });
  };
  var onError = function onError2(event) {
    setState({
      status: "error",
      errorCode: event.error
    });
  };
  var onResult = function onResult2(event) {
    setState({
      status: "recognizing",
      transcript: event.results[0] && event.results[0][0] && event.results[0][0].transcript || "",
      isSpeechFinal: event.results[0] && event.results[0].isFinal
    });
    if (searchAsYouSpeak && state.transcript) {
      onQueryChange(state.transcript);
    }
  };
  var onEnd = function onEnd2() {
    if (!state.errorCode && state.transcript && !searchAsYouSpeak) {
      onQueryChange(state.transcript);
    }
    if (state.status !== "error") {
      setState({
        status: "finished"
      });
    }
  };
  var startListening = function startListening2() {
    recognition = new SpeechRecognitionAPI();
    if (!recognition) {
      return;
    }
    resetState("askingPermission");
    recognition.interimResults = true;
    if (language) {
      recognition.lang = language;
    }
    recognition.addEventListener("start", onStart);
    recognition.addEventListener("error", onError);
    recognition.addEventListener("result", onResult);
    recognition.addEventListener("end", onEnd);
    recognition.start();
  };
  var dispose = function dispose2() {
    if (!recognition) {
      return;
    }
    recognition.stop();
    recognition.removeEventListener("start", onStart);
    recognition.removeEventListener("error", onError);
    recognition.removeEventListener("result", onResult);
    recognition.removeEventListener("end", onEnd);
    recognition = void 0;
  };
  var stopListening = function stopListening2() {
    dispose();
    resetState("finished");
  };
  return {
    getState,
    isBrowserSupported,
    isListening,
    startListening,
    stopListening,
    dispose
  };
};
var voiceSearchHelper_default = createVoiceSearchHelper;

// ../../node_modules/.pnpm/instantsearch.js@4.49.2_algoliasearch@4.14.2/node_modules/instantsearch.js/es/connectors/voice-search/connectVoiceSearch.js
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty2(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var withUsage = createDocumentationMessageGenerator({
  name: "voice-search",
  connector: true
});
var connectVoiceSearch = function connectVoiceSearch2(renderFn) {
  var unmountFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
  checkRendering(renderFn, withUsage());
  return function(widgetParams) {
    var _widgetParams$searchA = widgetParams.searchAsYouSpeak, searchAsYouSpeak = _widgetParams$searchA === void 0 ? false : _widgetParams$searchA, language = widgetParams.language, additionalQueryParameters = widgetParams.additionalQueryParameters, _widgetParams$createV = widgetParams.createVoiceSearchHelper, createVoiceSearchHelper3 = _widgetParams$createV === void 0 ? voiceSearchHelper_default : _widgetParams$createV;
    return {
      $$type: "ais.voiceSearch",
      init: function init(initOptions) {
        var instantSearchInstance = initOptions.instantSearchInstance;
        renderFn(_objectSpread2(_objectSpread2({}, this.getWidgetRenderState(initOptions)), {}, {
          instantSearchInstance
        }), true);
      },
      render: function render(renderOptions) {
        var instantSearchInstance = renderOptions.instantSearchInstance;
        renderFn(_objectSpread2(_objectSpread2({}, this.getWidgetRenderState(renderOptions)), {}, {
          instantSearchInstance
        }), false);
      },
      getRenderState: function getRenderState(renderState, renderOptions) {
        return _objectSpread2(_objectSpread2({}, renderState), {}, {
          voiceSearch: this.getWidgetRenderState(renderOptions)
        });
      },
      getWidgetRenderState: function getWidgetRenderState(renderOptions) {
        var _this = this;
        var helper = renderOptions.helper, instantSearchInstance = renderOptions.instantSearchInstance;
        if (!this._refine) {
          this._refine = function(query) {
            if (query !== helper.state.query) {
              var queryLanguages = language ? [language.split("-")[0]] : void 0;
              helper.setQueryParameter("queryLanguages", queryLanguages);
              if (typeof additionalQueryParameters === "function") {
                helper.setState(helper.state.setQueryParameters(_objectSpread2({
                  ignorePlurals: true,
                  removeStopWords: true,
                  optionalWords: query
                }, additionalQueryParameters({
                  query
                }))));
              }
              helper.setQuery(query).search();
            }
          };
        }
        if (!this._voiceSearchHelper) {
          this._voiceSearchHelper = createVoiceSearchHelper3({
            searchAsYouSpeak,
            language,
            onQueryChange: function onQueryChange(query) {
              return _this._refine(query);
            },
            onStateChange: function onStateChange() {
              renderFn(_objectSpread2(_objectSpread2({}, _this.getWidgetRenderState(renderOptions)), {}, {
                instantSearchInstance
              }), false);
            }
          });
        }
        var _voiceSearchHelper = this._voiceSearchHelper, isBrowserSupported = _voiceSearchHelper.isBrowserSupported, isListening = _voiceSearchHelper.isListening, startListening = _voiceSearchHelper.startListening, stopListening = _voiceSearchHelper.stopListening, getState = _voiceSearchHelper.getState;
        return {
          isBrowserSupported: isBrowserSupported(),
          isListening: isListening(),
          toggleListening: function toggleListening() {
            if (!isBrowserSupported()) {
              return;
            }
            if (isListening()) {
              stopListening();
            } else {
              startListening();
            }
          },
          voiceListeningState: getState(),
          widgetParams
        };
      },
      dispose: function dispose(_ref) {
        var state = _ref.state;
        this._voiceSearchHelper.dispose();
        unmountFn();
        var newState = state;
        if (typeof additionalQueryParameters === "function") {
          var additional = additionalQueryParameters({
            query: ""
          });
          var toReset = additional ? Object.keys(additional).reduce(function(acc, current) {
            acc[current] = void 0;
            return acc;
          }, {}) : {};
          newState = state.setQueryParameters(_objectSpread2({
            queryLanguages: void 0,
            ignorePlurals: void 0,
            removeStopWords: void 0,
            optionalWords: void 0
          }, toReset));
        }
        return newState.setQueryParameter("query", void 0);
      },
      getWidgetUiState: function getWidgetUiState(uiState, _ref2) {
        var searchParameters = _ref2.searchParameters;
        var query = searchParameters.query || "";
        if (!query) {
          return uiState;
        }
        return _objectSpread2(_objectSpread2({}, uiState), {}, {
          query
        });
      },
      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref3) {
        var uiState = _ref3.uiState;
        return searchParameters.setQueryParameter("query", uiState.query || "");
      }
    };
  };
};
var connectVoiceSearch_default = connectVoiceSearch;
export {
  connectVoiceSearch_default as default
};
//# sourceMappingURL=instantsearch__js_es_connectors_voice-search_connectVoiceSearch.js.map
